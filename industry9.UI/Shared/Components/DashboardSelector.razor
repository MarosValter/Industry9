@inject IIndustry9Client Client

<MatIconButton OnClick="@OnMenuOpen" @ref="@_button" Icon="dashboard" />
@ChildContent(Dashboard)
<MatMenu @ref="@_menu">
    <MatList>
        @foreach (var dashboard in _dashboards)
        {
            <MatListItem @key="dashboard" OnClick="@(e => SelectDashboard(dashboard))">@dashboard.Name</MatListItem>
        }
    </MatList>
</MatMenu>

@code {
    private IDashboard1[] _dashboards = new IDashboard1[0];

    private IDashboard1 _dashboard = new Dashboard1(string.Empty, string.Empty);

    [Parameter]
    public IDashboard1 Dashboard
    {
        get => _dashboard;
        set
        {
            if (_dashboard != value)
            {
                _dashboard = value;
                if (DashboardChanged.HasDelegate)
                {
                    DashboardChanged.InvokeAsync(value);
                }
            }
        }
    }

    [Parameter]
    public EventCallback<IDashboard1> DashboardChanged { get; set; }

    [Parameter]
    public RenderFragment<IDashboard1> ChildContent { get; set; }

    BaseMatIconButton _button;
    BaseMatMenu _menu;

    protected override async Task OnInitializedAsync()
    {
        var result = await Client.GetDashboardsAsync();
        if (!result.HasErrors)
        {
            _dashboards = result.Data.Dashboards.ToArray();
        }
    }

    private async Task OnMenuOpen(MouseEventArgs e)
    {
        await _menu.OpenAsync(_button.Ref);
    }

    private void SelectDashboard(IDashboard1 dashboard)
    {
        Dashboard = dashboard;
    }

}
