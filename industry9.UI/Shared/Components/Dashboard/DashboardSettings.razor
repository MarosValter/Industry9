@using industry9.Shared.Dto.Dashboard
@using industry9.Shared.Dto.DashboardWidget
@using industry9.Common.Enums
@using industry9.Shared.Store.Features.Widget.Actions

@inject IDispatcher Dispatcher

@if (EditMode)
{
    <MatH5>Settings</MatH5>
    <MatTabGroup Class="tab-panel">
        <MatTab Label="General">
            <div class="mat-elevation-z4 card-panel">
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatH6>Name</MatH6>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatTextField @bind-Value="@Dashboard.Name" FullWidth="true" Required="true"></MatTextField>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatH6>Labels</MatH6>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <LabelBar Labels="@Dashboard?.Labels" EditMode="@EditMode"></LabelBar>
                        </div>
                    </div>
                </div>
            </div>
        </MatTab>
        <MatTab Label="Security">
            <div class="mat-elevation-z4 card-panel">
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatH6>Sharing</MatH6>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <label style="color: @(Public ? "green" : "red")">@(Public ? "Public" : "Private")</label>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
                            <MatSlideToggle @bind-Value="@Public"></MatSlideToggle>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            <label>Author:</label>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
                            <MatOverline>Author John</MatOverline>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatH6>Permissions</MatH6>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <MatListGroup>
                                <MatListGroupSubHeader Style="color: green">Allowed</MatListGroupSubHeader>
                                <MatDivider></MatDivider>
                                @RenderPermissionList(AllowPermissions)
                                <MatListGroupSubHeader Style="color: red">Denied</MatListGroupSubHeader>
                                <MatDivider></MatDivider>
                                @RenderPermissionList(DenyPermissions)
                            </MatListGroup>
                        </div>
                    </div>
                </div>
            </div>
        </MatTab>
        <MatTab Label="Widgets">
            <MatAccordion Class="card-panel sticky-panel">
                <MatExpansionPanel Expanded="true">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Layout</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <div class="mat-layout-grid">
                            <div class="mat-layout-grid-inner">
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2 cell-label-centered">
                                    <label>Column count: </label><strong>@ColumnCount</strong>
                                </div>
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                                    <MatSlider @bind-Value="@ColumnCount" Step="1" EnableStep="true" ValueMin="2" ValueMax="6"></MatSlider>
                                </div>
                            </div>
                        </div>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>

            <div class="mat-layout-grid px-0">
                <div class="mat-layout-grid-inner">
                    @foreach (var (widget, i) in _widgets.Select((x, i) => (x, i)))
                    {
                        if (i == 0)
                        {
                            for (var j = 0; j < (widget.Position.Y - 1) * ColumnCount + widget.Position.X - 1; ++j)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-@(12/ColumnCount)">
                                    <EmptyDashboardWidget OnAdd="@AddWidget"></EmptyDashboardWidget>
                                </div>
                            }
                        }
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-@(12/ColumnCount*widget.Size.Width)">
                            <DashboardWidgetCard @key="widget" Widget="@widget.Widget" OnConfigure="@EditWidget" OnDelete="@DeleteWidget"></DashboardWidgetCard>
                        </div>
                        for (var j = 0; j < ColumnCount - widget.Position.X - widget.Size.Width + 1 - (_widgets.Count - 1 > i && _widgets[i + 1].Position.Y == widget.Position.Y ? ColumnCount - _widgets[i + 1].Position.X + 1 : 0); ++j)
                        {
                            <div class="TEST mat-layout-grid-cell mat-layout-grid-cell-span-@(12/ColumnCount)">
                                <EmptyDashboardWidget OnAdd="@AddWidget"></EmptyDashboardWidget>
                            </div>
                        }
                    }
                    @for (var i = 0; i < ColumnCount * Math.Max(1, 3 - Dashboard.Widgets.Select(x => x.Position.Y + x.Size.Height - 1).OrderBy(x => x).FirstOrDefault()); ++i)
                    {
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-@(12/ColumnCount)">
                            <EmptyDashboardWidget OnAdd="@AddWidget"></EmptyDashboardWidget>
                        </div>
                    }
                </div>
            </div>
        </MatTab>
    </MatTabGroup>

    <DashboardWidgetDialog EditedObject="@_editedObject" UsedWidgets="@Dashboard.Widgets.Select(x => x.WidgetId).ToList()" @bind-IsOpen="@_isDialogOpen" Operation="@_operation"></DashboardWidgetDialog>
}

@code {
    bool _isDialogOpen;
    CRUDOperation _operation;
    DashboardWidgetData _editedObject = new DashboardWidgetData();
    IList<DashboardWidgetData> _widgets;

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public DashboardData Dashboard { get; set; } = new DashboardData();

    public bool Public { get; set; }

    public int ColumnCount { get; set; } = 4;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _widgets = Dashboard.Widgets.OrderBy(x => x.Position.Y).ThenBy(x => x.Position.X).ToList();
    }

    void AddWidget()
    {
        Dispatcher.Dispatch(new FetchWidgetsAction());

        _operation = CRUDOperation.Create;
        _editedObject = new DashboardWidgetData
        {
            DashboardId = Dashboard.Id
        };
        _isDialogOpen = true;
    }

    void EditWidget(string id)
    {
        Dispatcher.Dispatch(new FetchWidgetsAction());

        _operation = CRUDOperation.Update;
        _editedObject = Dashboard.Widgets.FirstOrDefault(x => x.WidgetId == id);
        _isDialogOpen = true;
    }

    void DeleteWidget(string id)
    {
        _operation = CRUDOperation.Delete;
        _editedObject = Dashboard.Widgets.FirstOrDefault(x => x.WidgetId == id);
        _isDialogOpen = true;
    }

    Permission[] AllowPermissions { get; } = {
        new Permission(),
        new Permission(),
    };

    Permission[] DenyPermissions { get; }

    private class Permission
    {

    }

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    DashboardName = Dashboard?.Name;
    //}

    //protected override void OnParametersSet()
    //{
    //    base.OnParametersSet();
    //    DashboardName = Dashboard?.Name;
    //}

    private RenderFragment RenderPermissionList(IEnumerable<Permission> permissions) =>
    @<MatList>
        @foreach (var permission in permissions ?? Enumerable.Empty<Permission>())
        {
            <MatListItem>
                @RenderPermissionItem(permission)
            </MatListItem>
        }
        <MatListItem>
            <MatListItemText>
                <MatListItemPrimaryText>@( permissions?.Any() == true ? "Add" : "Empty")</MatListItemPrimaryText>
                <MatListItemSecondaryText>Create new permission</MatListItemSecondaryText>
            </MatListItemText>
        </MatListItem>
    </MatList>;

          private RenderFragment RenderPermissionItem(Permission permission) =>
        @<p>TODO</p>;

}
