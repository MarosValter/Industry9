@page "/account/profile"
@page "/account/profile/{UserId}"

@layout LoginLayout
@attribute [Authorize]

@inject IMatToaster MatToaster
@inject IdentityAuthenticationStateProvider AuthStateProvider

<h1>User Profile</h1>
<p>User profile management.</p>
@if (_userInfo == null)
{
    <LoadingBackground ShowLogoBox="true"></LoadingBackground>
}
else
{
    <MatButton Icon="rotate_right" OnClick="@(() => OpenResetPasswordDialog())" Label="Change Password" Raised="true" class="form-group d-flex justify-content-end"></MatButton>
    <EditForm Model="@_userInfo" OnValidSubmit="@UpdateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>

            <div class="form-group">
                <MatTextField @bind-Value="@_userInfo.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true" ReadOnly="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_userInfo.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_userInfo.FirstName" Label="First Name" FullWidth="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_userInfo.LastName" Label="Last Name" FullWidth="true"></MatTextField>
            </div>

            <div class="form-group">
                <strong>Roles</strong><br />
                <MatChipSet>
                    @foreach (var role in _userInfo.Roles)
                    {
                        <MatChip Label="@role"></MatChip>
                    }
                </MatChipSet>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MatButton Type="submit" Raised="true">Update Profile</MatButton>
            </div>
        </fieldset>
    </EditForm>

    <MatDialog @bind-IsOpen="@_resetPasswordDialogOpen">
        <MatDialogTitle>Manual Password Reset for @_registerParameters.UserName</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@_registerParameters" OnValidSubmit="@ResetUserPasswordAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@_registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@_registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { _resetPasswordDialogOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@ResetUserPasswordAsync">Reset User Password</MatButton>
        </MatDialogActions>
    </MatDialog>

}
@code {

    [Parameter]
    public string UserId { get; set; }

    UserInfoData _userInfo;
    bool _resetPasswordDialogOpen;
    readonly RegisterData _registerParameters = new RegisterData();

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await AuthStateProvider.GetUserInfo();
    }

    public void OpenResetPasswordDialog()
    {
        //Todo finish this reset password functionality - needs new API call "UserPasswordReset"
        MatToaster.Add("Not Yet Implemented", MatToastType.Warning);

        // reusing the registerParameters and User objects
        //registerParameters = new RegisterDto();  // reset object
        //registerParameters.UserName = userInfo.UserName;
        //this.resetPasswordDialogOpen = true;
    }

    public async Task ResetUserPasswordAsync()
    {
        if (_registerParameters.Password != _registerParameters.PasswordConfirm)
        {
            MatToaster.Add("Passwords Must Match", MatToastType.Warning);
        }
        else
        {
            //await AuthStateProvider.ResetPassword(_registerParameters)
            @*apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Account/UserPasswordReset/" + userInfo.UserId.ToString(), registerParameters.Password);
            if (apiResponse.StatusCode == 204 || apiResponse.StatusCode == 200)
            {
                matToaster.Add("Password Reset", MatToastType.Success, apiResponse.Message);
            }
            else
            {
                matToaster.Add(apiResponse.Message, MatToastType.Danger);
            }*@
            _resetPasswordDialogOpen = false;
        }
    }

    async Task UpdateUser()
    {
        try
        {
            var apiResponse = await AuthStateProvider.UpdateUser(_userInfo);

            if (!apiResponse.HasErrors)
            {
                MatToaster.Add("Profile update was Successful", MatToastType.Success);
            }
            else
            {
                foreach (var error in apiResponse.Errors)
                {
                    MatToaster.Add(error.Message, MatToastType.Danger, "Profile Update Failed");
                }
            }
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Profile Update Failed");
        }
    }
}