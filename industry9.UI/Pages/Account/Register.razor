@page "/account/register"

@layout LoginLayout

@inject IMatToaster MatToaster
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider

<MatCard>
    <div class="logo">
        <img src="_content/industry9.UI/images/blazorboilerplate.svg" style="width:100px;" /><br />Blazor Boilerplate
        <br />
        <h4>Create Account</h4>
    </div>

    <EditForm Model="@_registerParameters" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@_registerParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_registerParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@_registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MatButton Type="submit" Raised="true">Create account</MatButton>
            </div>
            <hr />
            <NavLink href="account/login">
                <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
            </NavLink>
        </fieldset>
    </EditForm>
</MatCard>

@code {
    readonly RegisterData _registerParameters = new RegisterData();

    async Task RegisterUser()
    {
        if (_registerParameters.Password != _registerParameters.PasswordConfirm)
        {
            MatToaster.Add("Password Confirmation Failed", MatToastType.Danger, "");
            return;
        }

        try
        {
            await AuthStateProvider.Register(_registerParameters);
            MatToaster.Add("New User Email Verification was sent to: " + _registerParameters.Email, MatToastType.Success, "User Creation Sucessful");
            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "User Creation Failed");
        }
    }
}
