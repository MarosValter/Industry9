@page "/account/login"

@layout LoginLayout

@inject AppState AppState
@inject IMatToaster MatToaster
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider

<MatCard>
    <MatIconButton Icon="home" Link="/" Class="float-right"></MatIconButton>
    <div class="logo">
        <a href="/" title="industry9 Home"><img src="_content/industry9.UI/images/blazorboilerplate.svg" style="width:100px;" title="industry9 Home" alt="industry9" /><br />industry9</a>
        <br />
        <h4>Log In</h4>
        @*User -> Username: <b>user</b> Password: <b>user123</b><br />
        Admin -> Username: <b>admin</b> Password: <b>admin123</b><br />*@
    </div>
    <EditForm Model="@LoginParameters" OnValidSubmit="@SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@LoginParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@LoginParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatCheckbox @bind-Value="@LoginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>
                <MatButton class="float-right" Type="submit" Raised="true">Login</MatButton>
            </div>
            <hr />
            <div>
                <MatButton class="float-left" OnClick="@Register" Raised="true">Create account</MatButton>
                <MatButton class="float-right" OnClick="@GoogleSignIn" Raised="true">Sign in with <img height="18" style="margin-left: 5px" src="https://www.google.pl/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png" /></MatButton><br />
            </div>
        </fieldset>
    </EditForm>
</MatCard>
<MatAccordion>
    <MatExpansionPanel @bind-Expanded="@_forgotPasswordToggle">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Forgot Password?</MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader></MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <EditForm Model="@ForgotPasswordParameters" OnValidSubmit="@ForgotPassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <MatTextField @bind-Value="@ForgotPasswordParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatButton class="float-right" Type="submit" Raised="true">Submit</MatButton>
                </div>
            </EditForm>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>

@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    string _navigateTo = string.Empty;
    bool _forgotPasswordToggle;

    LoginData LoginParameters { get; } = new LoginData();
    ForgotPasswordData ForgotPasswordParameters { get; } = new ForgotPasswordData();

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri + _navigateTo);
        }
    }

    void GoogleSignIn()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "api/externalauth/challenge/google", true);
    }

    void Register()
    {
        NavigationManager.NavigateTo("/account/register");
    }

    async Task SubmitLogin()
    {
        try
        {
            var response = await AuthStateProvider.Login(LoginParameters);
            if (response.StatusCode == 200)
            {
                // On successful Login the response.Message is the Last Page Visited from User Profile
                // We can't navigate yet as the setup is proceeding asynchronously
                if (!string.IsNullOrEmpty(response.Message))
                {
                    _navigateTo = response.Message;
                }
            }
            else
            {
                MatToaster.Add(response.Message, MatToastType.Danger, "Login Attempt Failed");
            }
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Login Attempt Failed");
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await AuthStateProvider.ForgotPassword(ForgotPasswordParameters);
            MatToaster.Add("Forgot Password Email Sent", MatToastType.Success);
            ForgotPasswordParameters.Email = "";
            _forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            MatToaster.Add(ex.Message, MatToastType.Danger, "Reset Password Attempt Failed");
        }
    }
}