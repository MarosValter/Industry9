@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using industry9.Shared.Store.Base.Actions
@using industry9.Shared.Store.Features.Dashboard.Actions
@using industry9.Shared.Store.States

@*@attribute [Authorize]*@

@inject IState<HomepageState> DashboardState
@inject IDispatcher Dispatcher

<DashboardSettings Dashboard="@DashboardState.Value.Dashboard" EditMode="@DashboardState.Value.EditMode"></DashboardSettings>
@if (!DashboardState.Value.EditMode)
{
<LabelBar Labels="@DashboardState.Value.Dashboard?.Labels" EditMode="@DashboardState.Value.EditMode"></LabelBar>
@*@_labelBar*@
}

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        @foreach (var widget in DashboardState.Value.Dashboard?.Widgets ?? Enumerable.Empty<IWidgetId>())
        {
        <div class="mat-layout-grid-cell">

        </div>
        }
    </div>
</div>

@if (DashboardState.Value.IsLoading)
{
<div class="loading-container">

</div>
}

@if (DashboardState.Value.EditMode)
{
<MatFAB Icon="@MatIconNames.Undo" Class="btn-edit-ternary" OnClick="@(e => Undo())"></MatFAB>
<MatFAB Icon="@MatIconNames.Done" Class="btn-edit-secondary" OnClick="@(e => ToggleEditMode(false, true))"></MatFAB>
<MatFAB Icon="@MatIconNames.Clear" Class="btn-edit-primary" OnClick="@(e => ToggleEditMode(false, false))"></MatFAB>
}
else
{
<MatFAB Icon="@MatIconNames.Edit" Class="btn-edit-primary" OnClick="@(e => ToggleEditMode(true, false))"></MatFAB>
}

@code {
    @*RenderFragment _labelBar;

        protected override Task OnInitializedAsync()
        {
            _labelBar =@<LabelBar Labels="@DashboardState.Value.SelectedDashboard?.Labels" EditMode="@DashboardState.Value.EditMode"></LabelBar>;
            return base.OnInitializedAsync();
        }*@

    private void ToggleEditMode(bool enabled, bool saveChanges)
    {
        Dispatcher.Dispatch(new ToggleEditModeAction(enabled, saveChanges));
    }

    private void Undo()
    {
        Dispatcher.Dispatch(new UndoAction("Dashboard"));
    }

    // TODO argument should be IWidgetLite probably, to be able to access size & position
    private string GetWidgetCellSpan(IWidgetId widget)
    {
        return "";
    }
}
