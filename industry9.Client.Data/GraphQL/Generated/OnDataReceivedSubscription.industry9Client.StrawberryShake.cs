// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    /// <summary>
    /// Represents the operation service of the OnDataReceived GraphQL operation
    /// <code>
    /// subscription OnDataReceived($dataSourceId: ID!) {
    ///   onDataReceived(dataSourceId: $dataSourceId) {
    ///     __typename
    ///     name
    ///     value
    ///     dataSourceId
    ///     timestamp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedSubscription : global::industry9.Client.Data.GraphQL.Generated.IOnDataReceivedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnDataReceivedResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public OnDataReceivedSubscription(global::StrawberryShake.IOperationExecutor<IOnDataReceivedResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnDataReceivedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnDataReceivedResult>> Watch(global::System.String dataSourceId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dataSourceId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String dataSourceId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dataSourceId", FormatDataSourceId(dataSourceId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnDataReceivedSubscriptionDocument.Instance.Hash.Value, name: "OnDataReceived", document: OnDataReceivedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDataSourceId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
