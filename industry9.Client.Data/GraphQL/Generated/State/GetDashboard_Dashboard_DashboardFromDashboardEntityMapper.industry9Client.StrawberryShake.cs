// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_DashboardFromDashboardEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.DashboardEntity, GetDashboard_Dashboard_Dashboard>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity, GetDashboard_Dashboard_Widgets_Widget_Widget> _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper;
        public GetDashboard_Dashboard_DashboardFromDashboardEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity, GetDashboard_Dashboard_Widgets_Widget_Widget> getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper = getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper));
        }

        public GetDashboard_Dashboard_Dashboard Map(global::industry9.Client.Data.GraphQL.Generated.State.DashboardEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDashboard_Dashboard_Dashboard(entity.Id, entity.Name, entity.Private, entity.ColumnCount, entity.AuthorId, entity.Created, MapIGetDashboard_Dashboard_LabelsArray(entity.Labels, snapshot), MapIGetDashboard_Dashboard_WidgetsArray(entity.Widgets, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Labels?>? MapIGetDashboard_Dashboard_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Labels?>();
            foreach (global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Labels? MapIGetDashboard_Dashboard_Labels(global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets?>? MapIGetDashboard_Dashboard_WidgetsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.State.DashboardWidgetData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dashboardWidgets = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets?>();
            foreach (global::industry9.Client.Data.GraphQL.Generated.State.DashboardWidgetData? child in list)
            {
                dashboardWidgets.Add(MapIGetDashboard_Dashboard_Widgets(child, snapshot));
            }

            return dashboardWidgets;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets? MapIGetDashboard_Dashboard_Widgets(global::industry9.Client.Data.GraphQL.Generated.State.DashboardWidgetData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets returnValue = default !;
            if (data?.__typename.Equals("DashboardWidget", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_DashboardWidget(MapIGetDashboard_Dashboard_Widgets_Widget(data.Widget, snapshot), data.Size ?? throw new global::System.ArgumentNullException(), data.Position ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget? MapIGetDashboard_Dashboard_Widgets_Widget(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                return _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_Labels?>();
            foreach (global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_Labels? MapIGetDashboard_Dashboard_Widgets_Widget_Labels(global::industry9.Client.Data.GraphQL.Generated.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.State.ColumnMappingData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var columnMappings = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>();
            foreach (global::industry9.Client.Data.GraphQL.Generated.State.ColumnMappingData? child in list)
            {
                columnMappings.Add(MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child, snapshot));
            }

            return columnMappings;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::industry9.Client.Data.GraphQL.Generated.State.ColumnMappingData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings returnValue = default !;
            if (data?.__typename.Equals("ColumnMapping", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMapping(data.Name, data.Format, data.DataSourceId ?? throw new global::System.ArgumentNullException(), data.SourceColumn);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }
}
