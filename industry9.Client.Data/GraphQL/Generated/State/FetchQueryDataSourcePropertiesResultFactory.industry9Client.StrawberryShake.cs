// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GraphQL.Generated.FetchQueryDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchQueryDataSourcePropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.GraphQL.Generated.IFetchQueryDataSourcePropertiesResult);
        public FetchQueryDataSourcePropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchQueryDataSourcePropertiesResultInfo info)
            {
                return new FetchQueryDataSourcePropertiesResult(MapIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(info.FetchDataQueryPropertiesFromDataSource, snapshot));
            }

            throw new global::System.ArgumentException("FetchQueryDataSourcePropertiesResultInfo expected.");
        }

        private global::industry9.Client.Data.GraphQL.Generated.IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource? MapIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(global::industry9.Client.Data.GraphQL.Generated.State.DataQueryDataSourcePropertiesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource returnValue = default !;
            if (data?.__typename.Equals("DataQueryDataSourceProperties", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties(data.Query);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
