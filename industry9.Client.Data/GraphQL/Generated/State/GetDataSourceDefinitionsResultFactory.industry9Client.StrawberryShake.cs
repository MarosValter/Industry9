// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GraphQL.Generated.GetDataSourceDefinitionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.DataSourceDefinitionEntity, GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition> _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper;
        public GetDataSourceDefinitionsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.DataSourceDefinitionEntity, GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition> getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper = getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinitionsResult);
        public GetDataSourceDefinitionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDataSourceDefinitionsResultInfo info)
            {
                return new GetDataSourceDefinitionsResult(MapNonNullableIGetDataSourceDefinitions_DataSourceDefinitionsNonNullableArray(info.DataSourceDefinitions, snapshot));
            }

            throw new global::System.ArgumentException("GetDataSourceDefinitionsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinitions_DataSourceDefinitions> MapNonNullableIGetDataSourceDefinitions_DataSourceDefinitionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var dataSourceDefinitions = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinitions_DataSourceDefinitions>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                dataSourceDefinitions.Add(MapNonNullableIGetDataSourceDefinitions_DataSourceDefinitions(child, snapshot));
            }

            return dataSourceDefinitions;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinitions_DataSourceDefinitions MapNonNullableIGetDataSourceDefinitions_DataSourceDefinitions(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("DataSourceDefinition", global::System.StringComparison.Ordinal))
            {
                return _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.GraphQL.Generated.State.DataSourceDefinitionEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
