// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GraphQL.Generated.GetDashboardsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.DashboardEntity, GetDashboards_Dashboards_Dashboard> _getDashboards_Dashboards_DashboardFromDashboardEntityMapper;
        public GetDashboardsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.DashboardEntity, GetDashboards_Dashboards_Dashboard> getDashboards_Dashboards_DashboardFromDashboardEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDashboards_Dashboards_DashboardFromDashboardEntityMapper = getDashboards_Dashboards_DashboardFromDashboardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDashboards_Dashboards_DashboardFromDashboardEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.GraphQL.Generated.IGetDashboardsResult);
        public GetDashboardsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDashboardsResultInfo info)
            {
                return new GetDashboardsResult(MapNonNullableIGetDashboards_DashboardsNonNullableArray(info.Dashboards, snapshot));
            }

            throw new global::System.ArgumentException("GetDashboardsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDashboards_Dashboards> MapNonNullableIGetDashboards_DashboardsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var dashboards = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetDashboards_Dashboards>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                dashboards.Add(MapNonNullableIGetDashboards_Dashboards(child, snapshot));
            }

            return dashboards;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetDashboards_Dashboards MapNonNullableIGetDashboards_Dashboards(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Dashboard", global::System.StringComparison.Ordinal))
            {
                return _getDashboards_Dashboards_DashboardFromDashboardEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.GraphQL.Generated.State.DashboardEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
