// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GraphQL.Generated.GetWidgetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity, GetWidgets_Widgets_Widget> _getWidgets_Widgets_WidgetFromWidgetEntityMapper;
        public GetWidgetsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity, GetWidgets_Widgets_Widget> getWidgets_Widgets_WidgetFromWidgetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getWidgets_Widgets_WidgetFromWidgetEntityMapper = getWidgets_Widgets_WidgetFromWidgetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getWidgets_Widgets_WidgetFromWidgetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.GraphQL.Generated.IGetWidgetsResult);
        public GetWidgetsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetWidgetsResultInfo info)
            {
                return new GetWidgetsResult(MapNonNullableIGetWidgets_WidgetsNonNullableArray(info.Widgets, snapshot));
            }

            throw new global::System.ArgumentException("GetWidgetsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetWidgets_Widgets> MapNonNullableIGetWidgets_WidgetsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var widgets = new global::System.Collections.Generic.List<global::industry9.Client.Data.GraphQL.Generated.IGetWidgets_Widgets>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                widgets.Add(MapNonNullableIGetWidgets_Widgets(child, snapshot));
            }

            return widgets;
        }

        private global::industry9.Client.Data.GraphQL.Generated.IGetWidgets_Widgets MapNonNullableIGetWidgets_Widgets(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                return _getWidgets_Widgets_WidgetFromWidgetEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.GraphQL.Generated.State.WidgetEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }
}
