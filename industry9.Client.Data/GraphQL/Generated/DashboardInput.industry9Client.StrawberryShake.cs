// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardInput : global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo, global::System.IEquatable<DashboardInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DashboardInput)obj);
        }

        public virtual global::System.Boolean Equals(DashboardInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && Name.Equals(other.Name) && Private == other.Private && ColumnCount == other.ColumnCount && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Widgets, other.Widgets);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Private.GetHashCode();
                hash ^= 397 * ColumnCount.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (Widgets != null)
                {
                    foreach (var Widgets_elm in Widgets)
                    {
                        if (Widgets_elm != null)
                        {
                            hash ^= 397 * Widgets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.Boolean _value_private;
        private global::System.Boolean _set_private;
        private global::System.Int32 _value_columnCount;
        private global::System.Boolean _set_columnCount;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.LabelDataInput?>? _value_labels;
        private global::System.Boolean _set_labels;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.DashboardWidgetInput?>? _value_widgets;
        private global::System.Boolean _set_widgets;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsIdSet => _set_id;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsNameSet => _set_name;
        public global::System.Boolean Private
        {
            get => _value_private;
            set
            {
                _set_private = true;
                _value_private = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsPrivateSet => _set_private;
        public global::System.Int32 ColumnCount
        {
            get => _value_columnCount;
            set
            {
                _set_columnCount = true;
                _value_columnCount = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsColumnCountSet => _set_columnCount;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.LabelDataInput?>? Labels
        {
            get => _value_labels;
            set
            {
                _set_labels = true;
                _value_labels = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsLabelsSet => _set_labels;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.DashboardWidgetInput?>? Widgets
        {
            get => _value_widgets;
            set
            {
                _set_widgets = true;
                _value_widgets = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo.IsWidgetsSet => _set_widgets;
    }
}
