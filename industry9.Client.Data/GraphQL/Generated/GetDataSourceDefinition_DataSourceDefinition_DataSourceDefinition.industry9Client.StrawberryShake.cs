// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition : global::System.IEquatable<GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition>, IGetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition
    {
        public GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.GraphQL.Generated.DataSourceType type, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? inputs, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? columns)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Inputs = inputs;
            Columns = columns;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.GraphQL.Generated.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Inputs { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? Columns { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Inputs, other.Inputs) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Columns, other.Columns);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Inputs != null)
                {
                    foreach (var Inputs_elm in Inputs)
                    {
                        if (Inputs_elm != null)
                        {
                            hash ^= 397 * Inputs_elm.GetHashCode();
                        }
                    }
                }

                if (Columns != null)
                {
                    foreach (var Columns_elm in Columns)
                    {
                        if (Columns_elm != null)
                        {
                            hash ^= 397 * Columns_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}
