// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _labelDataInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dashboardWidgetInputFormatter = default !;
        public global::System.String TypeName => "DashboardInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _labelDataInputFormatter = serializerResolver.GetInputValueFormatter("LabelDataInput");
            _dashboardWidgetInputFormatter = serializerResolver.GetInputValueFormatter("DashboardWidgetInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.DashboardInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.State.IDashboardInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsPrivateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("private", FormatPrivate(input.Private)));
            }

            if (inputInfo.IsColumnCountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("columnCount", FormatColumnCount(input.ColumnCount)));
            }

            if (inputInfo.IsLabelsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("labels", FormatLabels(input.Labels)));
            }

            if (inputInfo.IsWidgetsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("widgets", FormatWidgets(input.Widgets)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _iDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatPrivate(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatColumnCount(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatLabels(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.LabelDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_labelDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatWidgets(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.DashboardWidgetInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_dashboardWidgetInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }
}
