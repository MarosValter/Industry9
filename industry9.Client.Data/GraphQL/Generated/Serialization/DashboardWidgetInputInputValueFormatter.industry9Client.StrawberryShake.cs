// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardWidgetInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _sizeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _positionFormatter = default !;
        public global::System.String TypeName => "DashboardWidgetInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _sizeFormatter = serializerResolver.GetInputValueFormatter("Size");
            _positionFormatter = serializerResolver.GetInputValueFormatter("Position");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.DashboardWidgetInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.State.IDashboardWidgetInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsDashboardIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("dashboardId", FormatDashboardId(input.DashboardId)));
            }

            if (inputInfo.IsWidgetIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("widgetId", FormatWidgetId(input.WidgetId)));
            }

            if (inputInfo.IsSizeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("size", FormatSize(input.Size)));
            }

            if (inputInfo.IsPositionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("position", FormatPosition(input.Position)));
            }

            return fields;
        }

        private global::System.Object? FormatDashboardId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatWidgetId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatSize(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _sizeFormatter.Format(input);
        }

        private global::System.Object? FormatPosition(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _positionFormatter.Format(input);
        }
    }
}
