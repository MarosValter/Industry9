// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataSourceDefinitionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dataSourceTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _exportedColumnDataInputFormatter = default !;
        public global::System.String TypeName => "DataSourceDefinitionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dataSourceTypeFormatter = serializerResolver.GetInputValueFormatter("DataSourceType");
            _exportedColumnDataInputFormatter = serializerResolver.GetInputValueFormatter("ExportedColumnDataInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.DataSourceDefinitionInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.GraphQL.Generated.State.IDataSourceDefinitionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            if (inputInfo.IsInputsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("inputs", FormatInputs(input.Inputs)));
            }

            if (inputInfo.IsColumnsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("columns", FormatColumns(input.Columns)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _iDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatType(global::industry9.Client.Data.GraphQL.Generated.DataSourceType input)
        {
            return _dataSourceTypeFormatter.Format(input);
        }

        private global::System.Object? FormatInputs(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatColumns(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.GraphQL.Generated.ExportedColumnDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_exportedColumnDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }
}
