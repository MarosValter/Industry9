// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDashboards GraphQL operation
    /// <code>
    /// query GetDashboards {
    ///   dashboards {
    ///     __typename
    ///     ... DashboardLite
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardLite on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsQuery : global::industry9.Client.Data.GraphQL.Generated.IGetDashboardsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDashboardsResult> _operationExecutor;
        public GetDashboardsQuery(global::StrawberryShake.IOperationExecutor<IGetDashboardsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDashboardsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDashboardsQueryDocument.Instance.Hash.Value, name: "GetDashboards", document: GetDashboardsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}
