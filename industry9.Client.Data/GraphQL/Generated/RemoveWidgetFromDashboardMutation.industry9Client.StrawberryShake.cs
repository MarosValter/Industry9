// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    /// <summary>
    /// Represents the operation service of the RemoveWidgetFromDashboard GraphQL operation
    /// <code>
    /// mutation RemoveWidgetFromDashboard($dashboardId: ID!, $widgetId: ID!) {
    ///   removeWidgetFromDashboard(dashboardId: $dashboardId, widgetId: $widgetId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardMutation : global::industry9.Client.Data.GraphQL.Generated.IRemoveWidgetFromDashboardMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRemoveWidgetFromDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public RemoveWidgetFromDashboardMutation(global::StrawberryShake.IOperationExecutor<IRemoveWidgetFromDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRemoveWidgetFromDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> ExecuteAsync(global::System.String dashboardId, global::System.String widgetId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(dashboardId, widgetId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> Watch(global::System.String dashboardId, global::System.String widgetId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dashboardId, widgetId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String dashboardId, global::System.String widgetId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dashboardId", FormatDashboardId(dashboardId));
            variables.Add("widgetId", FormatWidgetId(widgetId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RemoveWidgetFromDashboardMutationDocument.Instance.Hash.Value, name: "RemoveWidgetFromDashboard", document: RemoveWidgetFromDashboardMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDashboardId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatWidgetId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
