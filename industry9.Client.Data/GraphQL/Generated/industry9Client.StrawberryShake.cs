// <auto-generated/>
#nullable enable

namespace industry9.Client.Data
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsResult : global::System.IEquatable<GetDashboardsResult>, IGetDashboardsResult
    {
        public GetDashboardsResult(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards?>? dashboards)
        {
            Dashboards = dashboards;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards?>? Dashboards { get; }

        public virtual global::System.Boolean Equals(GetDashboardsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Dashboards, other.Dashboards));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboardsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Dashboards != null)
                {
                    foreach (var Dashboards_elm in Dashboards)
                    {
                        if (Dashboards_elm != null)
                        {
                            hash ^= 397 * Dashboards_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboards_Dashboards_Dashboard : global::System.IEquatable<GetDashboards_Dashboards_Dashboard>, IGetDashboards_Dashboards_Dashboard
    {
        public GetDashboards_Dashboards_Dashboard(global::System.String id, global::System.String? name, global::System.Boolean @private, global::System.String? authorId, global::System.DateTimeOffset created, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards_Labels?>? labels)
        {
            Id = id;
            Name = name;
            Private = @private;
            AuthorId = authorId;
            Created = created;
            Labels = labels;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.Boolean Private { get; }

        public global::System.String? AuthorId { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards_Labels?>? Labels { get; }

        public virtual global::System.Boolean Equals(GetDashboards_Dashboards_Dashboard? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Private == other.Private && ((AuthorId is null && other.AuthorId is null) || AuthorId != null && AuthorId.Equals(other.AuthorId)) && Created.Equals(other.Created) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboards_Dashboards_Dashboard)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Private.GetHashCode();
                if (AuthorId != null)
                {
                    hash ^= 397 * AuthorId.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboards_Dashboards_Labels_LabelData : global::System.IEquatable<GetDashboards_Dashboards_Labels_LabelData>, IGetDashboards_Dashboards_Labels_LabelData
    {
        public GetDashboards_Dashboards_Labels_LabelData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetDashboards_Dashboards_Labels_LabelData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboards_Dashboards_Labels_LabelData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboardsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards?>? Dashboards { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDashboardLite
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.Boolean Private { get; }

        public global::System.String? AuthorId { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards_Labels?>? Labels { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboards_Dashboards : IDashboardLite
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboards_Dashboards_Dashboard : IGetDashboards_Dashboards
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ILabel
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboards_Dashboards_Labels : ILabel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboards_Dashboards_Labels_LabelData : IGetDashboards_Dashboards_Labels
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardResult : global::System.IEquatable<GetDashboardResult>, IGetDashboardResult
    {
        public GetDashboardResult(global::industry9.Client.Data.IGetDashboard_Dashboard? dashboard)
        {
            Dashboard = dashboard;
        }

        public global::industry9.Client.Data.IGetDashboard_Dashboard? Dashboard { get; }

        public virtual global::System.Boolean Equals(GetDashboardResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Dashboard is null && other.Dashboard is null) || Dashboard != null && Dashboard.Equals(other.Dashboard)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboardResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Dashboard != null)
                {
                    hash ^= 397 * Dashboard.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Dashboard : global::System.IEquatable<GetDashboard_Dashboard_Dashboard>, IGetDashboard_Dashboard_Dashboard
    {
        public GetDashboard_Dashboard_Dashboard(global::System.String id, global::System.String? name, global::System.Boolean @private, global::System.Int32 columnCount, global::System.String? authorId, global::System.DateTimeOffset created, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Labels?>? labels, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets?>? widgets)
        {
            Id = id;
            Name = name;
            Private = @private;
            ColumnCount = columnCount;
            AuthorId = authorId;
            Created = created;
            Labels = labels;
            Widgets = widgets;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.Boolean Private { get; }

        public global::System.Int32 ColumnCount { get; }

        public global::System.String? AuthorId { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Labels?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets?>? Widgets { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Dashboard? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Private == other.Private && ColumnCount == other.ColumnCount && ((AuthorId is null && other.AuthorId is null) || AuthorId != null && AuthorId.Equals(other.AuthorId)) && Created.Equals(other.Created) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Widgets, other.Widgets);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Dashboard)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Private.GetHashCode();
                hash ^= 397 * ColumnCount.GetHashCode();
                if (AuthorId != null)
                {
                    hash ^= 397 * AuthorId.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (Widgets != null)
                {
                    foreach (var Widgets_elm in Widgets)
                    {
                        if (Widgets_elm != null)
                        {
                            hash ^= 397 * Widgets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Labels_LabelData : global::System.IEquatable<GetDashboard_Dashboard_Labels_LabelData>, IGetDashboard_Dashboard_Labels_LabelData
    {
        public GetDashboard_Dashboard_Labels_LabelData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Labels_LabelData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Labels_LabelData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_DashboardWidgetData : global::System.IEquatable<GetDashboard_Dashboard_Widgets_DashboardWidgetData>, IGetDashboard_Dashboard_Widgets_DashboardWidgetData
    {
        public GetDashboard_Dashboard_Widgets_DashboardWidgetData(global::System.String? widgetId, global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget? widget, global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Size size, global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Position position)
        {
            WidgetId = widgetId;
            Widget = widget;
            Size = size;
            Position = position;
        }

        public global::System.String? WidgetId { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget? Widget { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Size Size { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Position Position { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_DashboardWidgetData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((WidgetId is null && other.WidgetId is null) || WidgetId != null && WidgetId.Equals(other.WidgetId))) && ((Widget is null && other.Widget is null) || Widget != null && Widget.Equals(other.Widget)) && Size.Equals(other.Size) && Position.Equals(other.Position);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_DashboardWidgetData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (WidgetId != null)
                {
                    hash ^= 397 * WidgetId.GetHashCode();
                }

                if (Widget != null)
                {
                    hash ^= 397 * Widget.GetHashCode();
                }

                hash ^= 397 * Size.GetHashCode();
                hash ^= 397 * Position.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Widget_Widget : global::System.IEquatable<GetDashboard_Dashboard_Widgets_Widget_Widget>, IGetDashboard_Dashboard_Widgets_Widget_Widget
    {
        public GetDashboard_Dashboard_Widgets_Widget_Widget(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.WidgetType type, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? labels, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? columnMappings)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Labels = labels;
            ColumnMappings = columnMappings;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? ColumnMappings { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_Widget_Widget? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ColumnMappings, other.ColumnMappings);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_Widget_Widget)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (ColumnMappings != null)
                {
                    foreach (var ColumnMappings_elm in ColumnMappings)
                    {
                        if (ColumnMappings_elm != null)
                        {
                            hash ^= 397 * ColumnMappings_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Size_Size : global::System.IEquatable<GetDashboard_Dashboard_Widgets_Size_Size>, IGetDashboard_Dashboard_Widgets_Size_Size
    {
        public GetDashboard_Dashboard_Widgets_Size_Size(global::System.Int32 width, global::System.Int32 height)
        {
            Width = width;
            Height = height;
        }

        public global::System.Int32 Width { get; }

        public global::System.Int32 Height { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_Size_Size? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Width == other.Width) && Height == other.Height;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_Size_Size)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Width.GetHashCode();
                hash ^= 397 * Height.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Position_Position : global::System.IEquatable<GetDashboard_Dashboard_Widgets_Position_Position>, IGetDashboard_Dashboard_Widgets_Position_Position
    {
        public GetDashboard_Dashboard_Widgets_Position_Position(global::System.Int32 x, global::System.Int32 y)
        {
            X = x;
            Y = y;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_Position_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_Position_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData : global::System.IEquatable<GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData>, IGetDashboard_Dashboard_Widgets_Widget_Labels_LabelData
    {
        public GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData : global::System.IEquatable<GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData>, IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData
    {
        public GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData(global::System.String? name, global::System.String? format, global::System.String? dataSourceId, global::System.String? sourceColumn)
        {
            Name = name;
            Format = format;
            DataSourceId = dataSourceId;
            SourceColumn = sourceColumn;
        }

        public global::System.String? Name { get; }

        public global::System.String? Format { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.String? SourceColumn { get; }

        public virtual global::System.Boolean Equals(GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Format is null && other.Format is null) || Format != null && Format.Equals(other.Format)) && ((DataSourceId is null && other.DataSourceId is null) || DataSourceId != null && DataSourceId.Equals(other.DataSourceId)) && ((SourceColumn is null && other.SourceColumn is null) || SourceColumn != null && SourceColumn.Equals(other.SourceColumn));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Format != null)
                {
                    hash ^= 397 * Format.GetHashCode();
                }

                if (DataSourceId != null)
                {
                    hash ^= 397 * DataSourceId.GetHashCode();
                }

                if (SourceColumn != null)
                {
                    hash ^= 397 * SourceColumn.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboardResult
    {
        public global::industry9.Client.Data.IGetDashboard_Dashboard? Dashboard { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDashboardDetail
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.Boolean Private { get; }

        public global::System.Int32 ColumnCount { get; }

        public global::System.String? AuthorId { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Labels?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets?>? Widgets { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard : IDashboardDetail
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Dashboard : IGetDashboard_Dashboard
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Labels : ILabel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Labels_LabelData : IGetDashboard_Dashboard_Labels
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDashboardWidget
    {
        public global::System.String? WidgetId { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget? Widget { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Size Size { get; }

        public global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Position Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets : IDashboardWidget
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_DashboardWidgetData : IGetDashboard_Dashboard_Widgets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IWidgetDetail
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? ColumnMappings { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget : IWidgetDetail
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget_Widget : IGetDashboard_Dashboard_Widgets_Widget
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface ISize
    {
        public global::System.Int32 Width { get; }

        public global::System.Int32 Height { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Size : ISize
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Size_Size : IGetDashboard_Dashboard_Widgets_Size
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IPosition
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Position : IPosition
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Position_Position : IGetDashboard_Dashboard_Widgets_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget_Labels : ILabel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget_Labels_LabelData : IGetDashboard_Dashboard_Widgets_Widget_Labels
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IColumnMapping
    {
        public global::System.String? Name { get; }

        public global::System.String? Format { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.String? SourceColumn { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings : IColumnMapping
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData : IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardResult : global::System.IEquatable<UpsertDashboardResult>, IUpsertDashboardResult
    {
        public UpsertDashboardResult(global::System.String? upsertDashboard)
        {
            UpsertDashboard = upsertDashboard;
        }

        public global::System.String? UpsertDashboard { get; }

        public virtual global::System.Boolean Equals(UpsertDashboardResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpsertDashboard is null && other.UpsertDashboard is null) || UpsertDashboard != null && UpsertDashboard.Equals(other.UpsertDashboard)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpsertDashboardResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpsertDashboard != null)
                {
                    hash ^= 397 * UpsertDashboard.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertDashboardResult
    {
        public global::System.String? UpsertDashboard { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardResult : global::System.IEquatable<DeleteDashboardResult>, IDeleteDashboardResult
    {
        public DeleteDashboardResult(global::System.Boolean deleteDashboard)
        {
            DeleteDashboard = deleteDashboard;
        }

        public global::System.Boolean DeleteDashboard { get; }

        public virtual global::System.Boolean Equals(DeleteDashboardResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteDashboard == other.DeleteDashboard);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteDashboardResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteDashboard.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteDashboardResult
    {
        public global::System.Boolean DeleteDashboard { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsResult : global::System.IEquatable<GetDataSourceDefinitionsResult>, IGetDataSourceDefinitionsResult
    {
        public GetDataSourceDefinitionsResult(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions?>? dataSourceDefinitions)
        {
            DataSourceDefinitions = dataSourceDefinitions;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions?>? DataSourceDefinitions { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinitionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(DataSourceDefinitions, other.DataSourceDefinitions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinitionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DataSourceDefinitions != null)
                {
                    foreach (var DataSourceDefinitions_elm in DataSourceDefinitions)
                    {
                        if (DataSourceDefinitions_elm != null)
                        {
                            hash ^= 397 * DataSourceDefinitions_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition : global::System.IEquatable<GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition>, IGetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition
    {
        public GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.DataSourceType type, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns?>? columns)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Columns = columns;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns?>? Columns { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Columns, other.Columns);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Columns != null)
                {
                    foreach (var Columns_elm in Columns)
                    {
                        if (Columns_elm != null)
                        {
                            hash ^= 397 * Columns_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData : global::System.IEquatable<GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData>, IGetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData
    {
        public GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData(global::System.String? name, global::industry9.Client.Data.ColumnValueType valueType)
        {
            Name = name;
            ValueType = valueType;
        }

        public global::System.String? Name { get; }

        public global::industry9.Client.Data.ColumnValueType ValueType { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ValueType.Equals(other.ValueType);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * ValueType.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitionsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions?>? DataSourceDefinitions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDataSourceDefinitionLite
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns?>? Columns { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitions_DataSourceDefinitions : IDataSourceDefinitionLite
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition : IGetDataSourceDefinitions_DataSourceDefinitions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IExportedColumn
    {
        public global::System.String? Name { get; }

        public global::industry9.Client.Data.ColumnValueType ValueType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitions_DataSourceDefinitions_Columns : IExportedColumn
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData : IGetDataSourceDefinitions_DataSourceDefinitions_Columns
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionResult : global::System.IEquatable<GetDataSourceDefinitionResult>, IGetDataSourceDefinitionResult
    {
        public GetDataSourceDefinitionResult(global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition? dataSourceDefinition)
        {
            DataSourceDefinition = dataSourceDefinition;
        }

        public global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition? DataSourceDefinition { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinitionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DataSourceDefinition is null && other.DataSourceDefinition is null) || DataSourceDefinition != null && DataSourceDefinition.Equals(other.DataSourceDefinition)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinitionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DataSourceDefinition != null)
                {
                    hash ^= 397 * DataSourceDefinition.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition : global::System.IEquatable<GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition>, IGetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition
    {
        public GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.DataSourceType type, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? inputs, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? columns)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Inputs = inputs;
            Columns = columns;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Inputs { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? Columns { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Inputs, other.Inputs) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Columns, other.Columns);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Inputs != null)
                {
                    foreach (var Inputs_elm in Inputs)
                    {
                        if (Inputs_elm != null)
                        {
                            hash ^= 397 * Inputs_elm.GetHashCode();
                        }
                    }
                }

                if (Columns != null)
                {
                    foreach (var Columns_elm in Columns)
                    {
                        if (Columns_elm != null)
                        {
                            hash ^= 397 * Columns_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData : global::System.IEquatable<GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData>, IGetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData
    {
        public GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData(global::System.String? name, global::industry9.Client.Data.ColumnValueType valueType)
        {
            Name = name;
            ValueType = valueType;
        }

        public global::System.String? Name { get; }

        public global::industry9.Client.Data.ColumnValueType ValueType { get; }

        public virtual global::System.Boolean Equals(GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ValueType.Equals(other.ValueType);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * ValueType.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitionResult
    {
        public global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition? DataSourceDefinition { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDataSourceDefinitionDetail
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Inputs { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? Columns { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinition_DataSourceDefinition : IDataSourceDefinitionDetail
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition : IGetDataSourceDefinition_DataSourceDefinition
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinition_DataSourceDefinition_Columns : IExportedColumn
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData : IGetDataSourceDefinition_DataSourceDefinition_Columns
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesResult : global::System.IEquatable<FetchRandomDataSourcePropertiesResult>, IFetchRandomDataSourcePropertiesResult
    {
        public FetchRandomDataSourcePropertiesResult(global::industry9.Client.Data.IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource? fetchRandomPropertiesFromDataSource)
        {
            FetchRandomPropertiesFromDataSource = fetchRandomPropertiesFromDataSource;
        }

        public global::industry9.Client.Data.IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource? FetchRandomPropertiesFromDataSource { get; }

        public virtual global::System.Boolean Equals(FetchRandomDataSourcePropertiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FetchRandomPropertiesFromDataSource is null && other.FetchRandomPropertiesFromDataSource is null) || FetchRandomPropertiesFromDataSource != null && FetchRandomPropertiesFromDataSource.Equals(other.FetchRandomPropertiesFromDataSource)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchRandomDataSourcePropertiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FetchRandomPropertiesFromDataSource != null)
                {
                    hash ^= 397 * FetchRandomPropertiesFromDataSource.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties : global::System.IEquatable<FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties>, IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties
    {
        public FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties(global::System.Int32 min, global::System.Int32 max)
        {
            Min = min;
            Max = max;
        }

        public global::System.Int32 Min { get; }

        public global::System.Int32 Max { get; }

        public virtual global::System.Boolean Equals(FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Min == other.Min) && Max == other.Max;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Min.GetHashCode();
                hash ^= 397 * Max.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchRandomDataSourcePropertiesResult
    {
        public global::industry9.Client.Data.IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource? FetchRandomPropertiesFromDataSource { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource
    {
        public global::System.Int32 Min { get; }

        public global::System.Int32 Max { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties : IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesResult : global::System.IEquatable<FetchQueryDataSourcePropertiesResult>, IFetchQueryDataSourcePropertiesResult
    {
        public FetchQueryDataSourcePropertiesResult(global::industry9.Client.Data.IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource? fetchDataQueryPropertiesFromDataSource)
        {
            FetchDataQueryPropertiesFromDataSource = fetchDataQueryPropertiesFromDataSource;
        }

        public global::industry9.Client.Data.IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource? FetchDataQueryPropertiesFromDataSource { get; }

        public virtual global::System.Boolean Equals(FetchQueryDataSourcePropertiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FetchDataQueryPropertiesFromDataSource is null && other.FetchDataQueryPropertiesFromDataSource is null) || FetchDataQueryPropertiesFromDataSource != null && FetchDataQueryPropertiesFromDataSource.Equals(other.FetchDataQueryPropertiesFromDataSource)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchQueryDataSourcePropertiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FetchDataQueryPropertiesFromDataSource != null)
                {
                    hash ^= 397 * FetchDataQueryPropertiesFromDataSource.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties : global::System.IEquatable<FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties>, IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties
    {
        public FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties(global::System.String? query)
        {
            Query = query;
        }

        public global::System.String? Query { get; }

        public virtual global::System.Boolean Equals(FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Query is null && other.Query is null) || Query != null && Query.Equals(other.Query)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Query != null)
                {
                    hash ^= 397 * Query.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchQueryDataSourcePropertiesResult
    {
        public global::industry9.Client.Data.IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource? FetchDataQueryPropertiesFromDataSource { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource
    {
        public global::System.String? Query { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties : IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionResult : global::System.IEquatable<UpsertDataSourceDefinitionResult>, IUpsertDataSourceDefinitionResult
    {
        public UpsertDataSourceDefinitionResult(global::System.String? upsertDataSourceDefinition)
        {
            UpsertDataSourceDefinition = upsertDataSourceDefinition;
        }

        public global::System.String? UpsertDataSourceDefinition { get; }

        public virtual global::System.Boolean Equals(UpsertDataSourceDefinitionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpsertDataSourceDefinition is null && other.UpsertDataSourceDefinition is null) || UpsertDataSourceDefinition != null && UpsertDataSourceDefinition.Equals(other.UpsertDataSourceDefinition)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpsertDataSourceDefinitionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpsertDataSourceDefinition != null)
                {
                    hash ^= 397 * UpsertDataSourceDefinition.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertDataSourceDefinitionResult
    {
        public global::System.String? UpsertDataSourceDefinition { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionResult : global::System.IEquatable<DeleteDataSourceDefinitionResult>, IDeleteDataSourceDefinitionResult
    {
        public DeleteDataSourceDefinitionResult(global::System.Boolean deleteDataSourceDefinition)
        {
            DeleteDataSourceDefinition = deleteDataSourceDefinition;
        }

        public global::System.Boolean DeleteDataSourceDefinition { get; }

        public virtual global::System.Boolean Equals(DeleteDataSourceDefinitionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteDataSourceDefinition == other.DeleteDataSourceDefinition);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteDataSourceDefinitionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteDataSourceDefinition.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteDataSourceDefinitionResult
    {
        public global::System.Boolean DeleteDataSourceDefinition { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesResult : global::System.IEquatable<AssignRandomDataSourcePropertiesResult>, IAssignRandomDataSourcePropertiesResult
    {
        public AssignRandomDataSourcePropertiesResult(global::System.Boolean assignRandomPropertiesToDataSource)
        {
            AssignRandomPropertiesToDataSource = assignRandomPropertiesToDataSource;
        }

        public global::System.Boolean AssignRandomPropertiesToDataSource { get; }

        public virtual global::System.Boolean Equals(AssignRandomDataSourcePropertiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AssignRandomPropertiesToDataSource == other.AssignRandomPropertiesToDataSource);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRandomDataSourcePropertiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AssignRandomPropertiesToDataSource.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAssignRandomDataSourcePropertiesResult
    {
        public global::System.Boolean AssignRandomPropertiesToDataSource { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesResult : global::System.IEquatable<AssignQueryDataSourcePropertiesResult>, IAssignQueryDataSourcePropertiesResult
    {
        public AssignQueryDataSourcePropertiesResult(global::System.Boolean assignDataQueryPropertiesToDataSource)
        {
            AssignDataQueryPropertiesToDataSource = assignDataQueryPropertiesToDataSource;
        }

        public global::System.Boolean AssignDataQueryPropertiesToDataSource { get; }

        public virtual global::System.Boolean Equals(AssignQueryDataSourcePropertiesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AssignDataQueryPropertiesToDataSource == other.AssignDataQueryPropertiesToDataSource);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignQueryDataSourcePropertiesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AssignDataQueryPropertiesToDataSource.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAssignQueryDataSourcePropertiesResult
    {
        public global::System.Boolean AssignDataQueryPropertiesToDataSource { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedResult : global::System.IEquatable<OnDataReceivedResult>, IOnDataReceivedResult
    {
        public OnDataReceivedResult(global::industry9.Client.Data.IOnDataReceived_OnDataReceived? onDataReceived)
        {
            OnDataReceived = onDataReceived;
        }

        public global::industry9.Client.Data.IOnDataReceived_OnDataReceived? OnDataReceived { get; }

        public virtual global::System.Boolean Equals(OnDataReceivedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((OnDataReceived is null && other.OnDataReceived is null) || OnDataReceived != null && OnDataReceived.Equals(other.OnDataReceived)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnDataReceivedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (OnDataReceived != null)
                {
                    hash ^= 397 * OnDataReceived.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceived_OnDataReceived_SensorData : global::System.IEquatable<OnDataReceived_OnDataReceived_SensorData>, IOnDataReceived_OnDataReceived_SensorData
    {
        public OnDataReceived_OnDataReceived_SensorData(global::System.String? name, global::System.Double @value, global::System.String? dataSourceId, global::System.DateTimeOffset timestamp)
        {
            Name = name;
            Value = @value;
            DataSourceId = dataSourceId;
            Timestamp = timestamp;
        }

        public global::System.String? Name { get; }

        public global::System.Double Value { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.DateTimeOffset Timestamp { get; }

        public virtual global::System.Boolean Equals(OnDataReceived_OnDataReceived_SensorData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && Value == other.Value && ((DataSourceId is null && other.DataSourceId is null) || DataSourceId != null && DataSourceId.Equals(other.DataSourceId)) && Timestamp.Equals(other.Timestamp);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnDataReceived_OnDataReceived_SensorData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Value.GetHashCode();
                if (DataSourceId != null)
                {
                    hash ^= 397 * DataSourceId.GetHashCode();
                }

                hash ^= 397 * Timestamp.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IOnDataReceivedResult
    {
        public global::industry9.Client.Data.IOnDataReceived_OnDataReceived? OnDataReceived { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IOnDataReceived_OnDataReceived
    {
        public global::System.String? Name { get; }

        public global::System.Double Value { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.DateTimeOffset Timestamp { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IOnDataReceived_OnDataReceived_SensorData : IOnDataReceived_OnDataReceived
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsResult : global::System.IEquatable<GetWidgetsResult>, IGetWidgetsResult
    {
        public GetWidgetsResult(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets?>? widgets)
        {
            Widgets = widgets;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets?>? Widgets { get; }

        public virtual global::System.Boolean Equals(GetWidgetsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Widgets, other.Widgets));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidgetsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Widgets != null)
                {
                    foreach (var Widgets_elm in Widgets)
                    {
                        if (Widgets_elm != null)
                        {
                            hash ^= 397 * Widgets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgets_Widgets_Widget : global::System.IEquatable<GetWidgets_Widgets_Widget>, IGetWidgets_Widgets_Widget
    {
        public GetWidgets_Widgets_Widget(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.WidgetType type, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets_Labels?>? labels)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Labels = labels;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets_Labels?>? Labels { get; }

        public virtual global::System.Boolean Equals(GetWidgets_Widgets_Widget? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidgets_Widgets_Widget)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgets_Widgets_Labels_LabelData : global::System.IEquatable<GetWidgets_Widgets_Labels_LabelData>, IGetWidgets_Widgets_Labels_LabelData
    {
        public GetWidgets_Widgets_Labels_LabelData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetWidgets_Widgets_Labels_LabelData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidgets_Widgets_Labels_LabelData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgetsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets?>? Widgets { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IWidgetLite
    {
        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets_Labels?>? Labels { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgets_Widgets : IWidgetLite
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgets_Widgets_Widget : IGetWidgets_Widgets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgets_Widgets_Labels : ILabel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgets_Widgets_Labels_LabelData : IGetWidgets_Widgets_Labels
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetResult : global::System.IEquatable<GetWidgetResult>, IGetWidgetResult
    {
        public GetWidgetResult(global::industry9.Client.Data.IGetWidget_Widget? widget)
        {
            Widget = widget;
        }

        public global::industry9.Client.Data.IGetWidget_Widget? Widget { get; }

        public virtual global::System.Boolean Equals(GetWidgetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Widget is null && other.Widget is null) || Widget != null && Widget.Equals(other.Widget)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidgetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Widget != null)
                {
                    hash ^= 397 * Widget.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidget_Widget_Widget : global::System.IEquatable<GetWidget_Widget_Widget>, IGetWidget_Widget_Widget
    {
        public GetWidget_Widget_Widget(global::System.String id, global::System.String? name, global::System.DateTimeOffset created, global::industry9.Client.Data.WidgetType type, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? labels, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? columnMappings)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Labels = labels;
            ColumnMappings = columnMappings;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? ColumnMappings { get; }

        public virtual global::System.Boolean Equals(GetWidget_Widget_Widget? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Created.Equals(other.Created) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ColumnMappings, other.ColumnMappings);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidget_Widget_Widget)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Created.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (ColumnMappings != null)
                {
                    foreach (var ColumnMappings_elm in ColumnMappings)
                    {
                        if (ColumnMappings_elm != null)
                        {
                            hash ^= 397 * ColumnMappings_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidget_Widget_Labels_LabelData : global::System.IEquatable<GetWidget_Widget_Labels_LabelData>, IGetWidget_Widget_Labels_LabelData
    {
        public GetWidget_Widget_Labels_LabelData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetWidget_Widget_Labels_LabelData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidget_Widget_Labels_LabelData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidget_Widget_ColumnMappings_ColumnMappingData : global::System.IEquatable<GetWidget_Widget_ColumnMappings_ColumnMappingData>, IGetWidget_Widget_ColumnMappings_ColumnMappingData
    {
        public GetWidget_Widget_ColumnMappings_ColumnMappingData(global::System.String? name, global::System.String? format, global::System.String? dataSourceId, global::System.String? sourceColumn)
        {
            Name = name;
            Format = format;
            DataSourceId = dataSourceId;
            SourceColumn = sourceColumn;
        }

        public global::System.String? Name { get; }

        public global::System.String? Format { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.String? SourceColumn { get; }

        public virtual global::System.Boolean Equals(GetWidget_Widget_ColumnMappings_ColumnMappingData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Format is null && other.Format is null) || Format != null && Format.Equals(other.Format)) && ((DataSourceId is null && other.DataSourceId is null) || DataSourceId != null && DataSourceId.Equals(other.DataSourceId)) && ((SourceColumn is null && other.SourceColumn is null) || SourceColumn != null && SourceColumn.Equals(other.SourceColumn));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWidget_Widget_ColumnMappings_ColumnMappingData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Format != null)
                {
                    hash ^= 397 * Format.GetHashCode();
                }

                if (DataSourceId != null)
                {
                    hash ^= 397 * DataSourceId.GetHashCode();
                }

                if (SourceColumn != null)
                {
                    hash ^= 397 * SourceColumn.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgetResult
    {
        public global::industry9.Client.Data.IGetWidget_Widget? Widget { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget : IWidgetDetail
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget_Widget : IGetWidget_Widget
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget_Labels : ILabel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget_Labels_LabelData : IGetWidget_Widget_Labels
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget_ColumnMappings : IColumnMapping
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidget_Widget_ColumnMappings_ColumnMappingData : IGetWidget_Widget_ColumnMappings
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetResult : global::System.IEquatable<UpsertWidgetResult>, IUpsertWidgetResult
    {
        public UpsertWidgetResult(global::System.String? upsertWidget)
        {
            UpsertWidget = upsertWidget;
        }

        public global::System.String? UpsertWidget { get; }

        public virtual global::System.Boolean Equals(UpsertWidgetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpsertWidget is null && other.UpsertWidget is null) || UpsertWidget != null && UpsertWidget.Equals(other.UpsertWidget)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpsertWidgetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpsertWidget != null)
                {
                    hash ^= 397 * UpsertWidget.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertWidgetResult
    {
        public global::System.String? UpsertWidget { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetResult : global::System.IEquatable<DeleteWidgetResult>, IDeleteWidgetResult
    {
        public DeleteWidgetResult(global::System.Boolean deleteWidget)
        {
            DeleteWidget = deleteWidget;
        }

        public global::System.Boolean DeleteWidget { get; }

        public virtual global::System.Boolean Equals(DeleteWidgetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteWidget == other.DeleteWidget);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteWidgetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteWidget.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteWidgetResult
    {
        public global::System.Boolean DeleteWidget { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardResult : global::System.IEquatable<AddWidgetToDashboardResult>, IAddWidgetToDashboardResult
    {
        public AddWidgetToDashboardResult(global::System.Boolean addWidgetToDashboard)
        {
            AddWidgetToDashboard = addWidgetToDashboard;
        }

        public global::System.Boolean AddWidgetToDashboard { get; }

        public virtual global::System.Boolean Equals(AddWidgetToDashboardResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddWidgetToDashboard == other.AddWidgetToDashboard);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddWidgetToDashboardResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddWidgetToDashboard.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddWidgetToDashboardResult
    {
        public global::System.Boolean AddWidgetToDashboard { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardResult : global::System.IEquatable<RemoveWidgetFromDashboardResult>, IRemoveWidgetFromDashboardResult
    {
        public RemoveWidgetFromDashboardResult(global::System.Boolean removeWidgetFromDashboard)
        {
            RemoveWidgetFromDashboard = removeWidgetFromDashboard;
        }

        public global::System.Boolean RemoveWidgetFromDashboard { get; }

        public virtual global::System.Boolean Equals(RemoveWidgetFromDashboardResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RemoveWidgetFromDashboard == other.RemoveWidgetFromDashboard);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RemoveWidgetFromDashboardResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RemoveWidgetFromDashboard.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRemoveWidgetFromDashboardResult
    {
        public global::System.Boolean RemoveWidgetFromDashboard { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _labelDataInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dashboardWidgetInputFormatter = default !;
        public global::System.String TypeName => "DashboardInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _labelDataInputFormatter = serializerResolver.GetInputValueFormatter("LabelDataInput");
            _dashboardWidgetInputFormatter = serializerResolver.GetInputValueFormatter("DashboardWidgetInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.DashboardInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IDashboardInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsPrivateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("private", FormatPrivate(input.Private)));
            }

            if (inputInfo.IsColumnCountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("columnCount", FormatColumnCount(input.ColumnCount)));
            }

            if (inputInfo.IsLabelsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("labels", FormatLabels(input.Labels)));
            }

            if (inputInfo.IsWidgetsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("widgets", FormatWidgets(input.Widgets)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatPrivate(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatColumnCount(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatLabels(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_labelDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatWidgets(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.DashboardWidgetInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_dashboardWidgetInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardInput : global::industry9.Client.Data.State.IDashboardInputInfo, global::System.IEquatable<DashboardInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DashboardInput)obj);
        }

        public virtual global::System.Boolean Equals(DashboardInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && Name.Equals(other.Name) && Private == other.Private && ColumnCount == other.ColumnCount && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Widgets, other.Widgets);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Private.GetHashCode();
                hash ^= 397 * ColumnCount.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (Widgets != null)
                {
                    foreach (var Widgets_elm in Widgets)
                    {
                        if (Widgets_elm != null)
                        {
                            hash ^= 397 * Widgets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.Boolean _value_private;
        private global::System.Boolean _set_private;
        private global::System.Int32 _value_columnCount;
        private global::System.Boolean _set_columnCount;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? _value_labels;
        private global::System.Boolean _set_labels;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.DashboardWidgetInput?>? _value_widgets;
        private global::System.Boolean _set_widgets;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsIdSet => _set_id;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsNameSet => _set_name;
        public global::System.Boolean Private
        {
            get => _value_private;
            set
            {
                _set_private = true;
                _value_private = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsPrivateSet => _set_private;
        public global::System.Int32 ColumnCount
        {
            get => _value_columnCount;
            set
            {
                _set_columnCount = true;
                _value_columnCount = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsColumnCountSet => _set_columnCount;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? Labels
        {
            get => _value_labels;
            set
            {
                _set_labels = true;
                _value_labels = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsLabelsSet => _set_labels;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.DashboardWidgetInput?>? Widgets
        {
            get => _value_widgets;
            set
            {
                _set_widgets = true;
                _value_widgets = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardInputInfo.IsWidgetsSet => _set_widgets;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LabelDataInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "LabelDataInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.LabelDataInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.ILabelDataInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LabelDataInput : global::industry9.Client.Data.State.ILabelDataInputInfo, global::System.IEquatable<LabelDataInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LabelDataInput)obj);
        }

        public virtual global::System.Boolean Equals(LabelDataInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.ILabelDataInputInfo.IsNameSet => _set_name;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardWidgetInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _sizeInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _positionInputFormatter = default !;
        public global::System.String TypeName => "DashboardWidgetInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _sizeInputFormatter = serializerResolver.GetInputValueFormatter("SizeInput");
            _positionInputFormatter = serializerResolver.GetInputValueFormatter("PositionInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.DashboardWidgetInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IDashboardWidgetInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsDashboardIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("dashboardId", FormatDashboardId(input.DashboardId)));
            }

            if (inputInfo.IsWidgetIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("widgetId", FormatWidgetId(input.WidgetId)));
            }

            if (inputInfo.IsSizeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("size", FormatSize(input.Size)));
            }

            if (inputInfo.IsPositionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("position", FormatPosition(input.Position)));
            }

            return fields;
        }

        private global::System.Object? FormatDashboardId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatWidgetId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatSize(global::industry9.Client.Data.SizeInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _sizeInputFormatter.Format(input);
        }

        private global::System.Object? FormatPosition(global::industry9.Client.Data.PositionInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _positionInputFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardWidgetInput : global::industry9.Client.Data.State.IDashboardWidgetInputInfo, global::System.IEquatable<DashboardWidgetInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DashboardWidgetInput)obj);
        }

        public virtual global::System.Boolean Equals(DashboardWidgetInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DashboardId.Equals(other.DashboardId)) && WidgetId.Equals(other.WidgetId) && Size.Equals(other.Size) && Position.Equals(other.Position);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DashboardId.GetHashCode();
                hash ^= 397 * WidgetId.GetHashCode();
                hash ^= 397 * Size.GetHashCode();
                hash ^= 397 * Position.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_dashboardId = default !;
        private global::System.Boolean _set_dashboardId;
        private global::System.String _value_widgetId = default !;
        private global::System.Boolean _set_widgetId;
        private global::industry9.Client.Data.SizeInput _value_size = default !;
        private global::System.Boolean _set_size;
        private global::industry9.Client.Data.PositionInput _value_position = default !;
        private global::System.Boolean _set_position;
        public global::System.String DashboardId
        {
            get => _value_dashboardId;
            set
            {
                _set_dashboardId = true;
                _value_dashboardId = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardWidgetInputInfo.IsDashboardIdSet => _set_dashboardId;
        public global::System.String WidgetId
        {
            get => _value_widgetId;
            set
            {
                _set_widgetId = true;
                _value_widgetId = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardWidgetInputInfo.IsWidgetIdSet => _set_widgetId;
        public global::industry9.Client.Data.SizeInput Size
        {
            get => _value_size;
            set
            {
                _set_size = true;
                _value_size = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardWidgetInputInfo.IsSizeSet => _set_size;
        public global::industry9.Client.Data.PositionInput Position
        {
            get => _value_position;
            set
            {
                _set_position = true;
                _value_position = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDashboardWidgetInputInfo.IsPositionSet => _set_position;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SizeInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "SizeInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.SizeInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.ISizeInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsWidthSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("width", FormatWidth(input.Width)));
            }

            if (inputInfo.IsHeightSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("height", FormatHeight(input.Height)));
            }

            return fields;
        }

        private global::System.Object? FormatWidth(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatHeight(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SizeInput : global::industry9.Client.Data.State.ISizeInputInfo, global::System.IEquatable<SizeInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SizeInput)obj);
        }

        public virtual global::System.Boolean Equals(SizeInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Width == other.Width) && Height == other.Height;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Width.GetHashCode();
                hash ^= 397 * Height.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_width;
        private global::System.Boolean _set_width;
        private global::System.Int32 _value_height;
        private global::System.Boolean _set_height;
        public global::System.Int32 Width
        {
            get => _value_width;
            set
            {
                _set_width = true;
                _value_width = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.ISizeInputInfo.IsWidthSet => _set_width;
        public global::System.Int32 Height
        {
            get => _value_height;
            set
            {
                _set_height = true;
                _value_height = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.ISizeInputInfo.IsHeightSet => _set_height;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PositionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "PositionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.PositionInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IPositionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsXSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("x", FormatX(input.X)));
            }

            if (inputInfo.IsYSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("y", FormatY(input.Y)));
            }

            return fields;
        }

        private global::System.Object? FormatX(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatY(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PositionInput : global::industry9.Client.Data.State.IPositionInputInfo, global::System.IEquatable<PositionInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PositionInput)obj);
        }

        public virtual global::System.Boolean Equals(PositionInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_x;
        private global::System.Boolean _set_x;
        private global::System.Int32 _value_y;
        private global::System.Boolean _set_y;
        public global::System.Int32 X
        {
            get => _value_x;
            set
            {
                _set_x = true;
                _value_x = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IPositionInputInfo.IsXSet => _set_x;
        public global::System.Int32 Y
        {
            get => _value_y;
            set
            {
                _set_y = true;
                _value_y = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IPositionInputInfo.IsYSet => _set_y;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataSourceDefinitionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dataSourceTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _exportedColumnDataInputFormatter = default !;
        public global::System.String TypeName => "DataSourceDefinitionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dataSourceTypeFormatter = serializerResolver.GetInputValueFormatter("DataSourceType");
            _exportedColumnDataInputFormatter = serializerResolver.GetInputValueFormatter("ExportedColumnDataInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.DataSourceDefinitionInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            if (inputInfo.IsInputsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("inputs", FormatInputs(input.Inputs)));
            }

            if (inputInfo.IsColumnsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("columns", FormatColumns(input.Columns)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatType(global::industry9.Client.Data.DataSourceType input)
        {
            return _dataSourceTypeFormatter.Format(input);
        }

        private global::System.Object? FormatInputs(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatColumns(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ExportedColumnDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_exportedColumnDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataSourceDefinitionInput : global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo, global::System.IEquatable<DataSourceDefinitionInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSourceDefinitionInput)obj);
        }

        public virtual global::System.Boolean Equals(DataSourceDefinitionInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && Name.Equals(other.Name) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Inputs, other.Inputs) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Columns, other.Columns);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Inputs != null)
                {
                    foreach (var Inputs_elm in Inputs)
                    {
                        if (Inputs_elm != null)
                        {
                            hash ^= 397 * Inputs_elm.GetHashCode();
                        }
                    }
                }

                if (Columns != null)
                {
                    foreach (var Columns_elm in Columns)
                    {
                        if (Columns_elm != null)
                        {
                            hash ^= 397 * Columns_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::industry9.Client.Data.DataSourceType _value_type;
        private global::System.Boolean _set_type;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_inputs;
        private global::System.Boolean _set_inputs;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ExportedColumnDataInput?>? _value_columns;
        private global::System.Boolean _set_columns;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo.IsIdSet => _set_id;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo.IsNameSet => _set_name;
        public global::industry9.Client.Data.DataSourceType Type
        {
            get => _value_type;
            set
            {
                _set_type = true;
                _value_type = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo.IsTypeSet => _set_type;
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Inputs
        {
            get => _value_inputs;
            set
            {
                _set_inputs = true;
                _value_inputs = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo.IsInputsSet => _set_inputs;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ExportedColumnDataInput?>? Columns
        {
            get => _value_columns;
            set
            {
                _set_columns = true;
                _value_columns = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataSourceDefinitionInputInfo.IsColumnsSet => _set_columns;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ExportedColumnDataInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _columnValueTypeFormatter = default !;
        public global::System.String TypeName => "ExportedColumnDataInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _columnValueTypeFormatter = serializerResolver.GetInputValueFormatter("ColumnValueType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.ExportedColumnDataInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IExportedColumnDataInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsValueTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("valueType", FormatValueType(input.ValueType)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatValueType(global::industry9.Client.Data.ColumnValueType input)
        {
            return _columnValueTypeFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ExportedColumnDataInput : global::industry9.Client.Data.State.IExportedColumnDataInputInfo, global::System.IEquatable<ExportedColumnDataInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExportedColumnDataInput)obj);
        }

        public virtual global::System.Boolean Equals(ExportedColumnDataInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ValueType.Equals(other.ValueType);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * ValueType.GetHashCode();
                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::industry9.Client.Data.ColumnValueType _value_valueType;
        private global::System.Boolean _set_valueType;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IExportedColumnDataInputInfo.IsNameSet => _set_name;
        public global::industry9.Client.Data.ColumnValueType ValueType
        {
            get => _value_valueType;
            set
            {
                _set_valueType = true;
                _value_valueType = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IExportedColumnDataInputInfo.IsValueTypeSet => _set_valueType;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RandomDataSourcePropertiesInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "RandomDataSourcePropertiesInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.RandomDataSourcePropertiesInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IRandomDataSourcePropertiesInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsMinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("min", FormatMin(input.Min)));
            }

            if (inputInfo.IsMaxSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("max", FormatMax(input.Max)));
            }

            return fields;
        }

        private global::System.Object? FormatMin(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatMax(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RandomDataSourcePropertiesInput : global::industry9.Client.Data.State.IRandomDataSourcePropertiesInputInfo, global::System.IEquatable<RandomDataSourcePropertiesInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RandomDataSourcePropertiesInput)obj);
        }

        public virtual global::System.Boolean Equals(RandomDataSourcePropertiesInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Min == other.Min) && Max == other.Max;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Min.GetHashCode();
                hash ^= 397 * Max.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_min;
        private global::System.Boolean _set_min;
        private global::System.Int32 _value_max;
        private global::System.Boolean _set_max;
        public global::System.Int32 Min
        {
            get => _value_min;
            set
            {
                _set_min = true;
                _value_min = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IRandomDataSourcePropertiesInputInfo.IsMinSet => _set_min;
        public global::System.Int32 Max
        {
            get => _value_max;
            set
            {
                _set_max = true;
                _value_max = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IRandomDataSourcePropertiesInputInfo.IsMaxSet => _set_max;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataQueryDataSourcePropertiesInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "DataQueryDataSourcePropertiesInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.DataQueryDataSourcePropertiesInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IDataQueryDataSourcePropertiesInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsQuerySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("query", FormatQuery(input.Query)));
            }

            return fields;
        }

        private global::System.Object? FormatQuery(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataQueryDataSourcePropertiesInput : global::industry9.Client.Data.State.IDataQueryDataSourcePropertiesInputInfo, global::System.IEquatable<DataQueryDataSourcePropertiesInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataQueryDataSourcePropertiesInput)obj);
        }

        public virtual global::System.Boolean Equals(DataQueryDataSourcePropertiesInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Query is null && other.Query is null) || Query != null && Query.Equals(other.Query)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Query != null)
                {
                    hash ^= 397 * Query.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_query;
        private global::System.Boolean _set_query;
        public global::System.String? Query
        {
            get => _value_query;
            set
            {
                _set_query = true;
                _value_query = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IDataQueryDataSourcePropertiesInputInfo.IsQuerySet => _set_query;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class WidgetInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _widgetTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _labelDataInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _columnMappingDataInputFormatter = default !;
        public global::System.String TypeName => "WidgetInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _widgetTypeFormatter = serializerResolver.GetInputValueFormatter("WidgetType");
            _labelDataInputFormatter = serializerResolver.GetInputValueFormatter("LabelDataInput");
            _columnMappingDataInputFormatter = serializerResolver.GetInputValueFormatter("ColumnMappingDataInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.WidgetInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IWidgetInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("type", FormatType(input.Type)));
            }

            if (inputInfo.IsLabelsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("labels", FormatLabels(input.Labels)));
            }

            if (inputInfo.IsColumnMappingsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("columnMappings", FormatColumnMappings(input.ColumnMappings)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatType(global::industry9.Client.Data.WidgetType input)
        {
            return _widgetTypeFormatter.Format(input);
        }

        private global::System.Object? FormatLabels(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_labelDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatColumnMappings(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ColumnMappingDataInput?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_columnMappingDataInputFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class WidgetInput : global::industry9.Client.Data.State.IWidgetInputInfo, global::System.IEquatable<WidgetInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WidgetInput)obj);
        }

        public virtual global::System.Boolean Equals(WidgetInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && Name.Equals(other.Name) && Type.Equals(other.Type) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Labels, other.Labels) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ColumnMappings, other.ColumnMappings);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                if (Labels != null)
                {
                    foreach (var Labels_elm in Labels)
                    {
                        if (Labels_elm != null)
                        {
                            hash ^= 397 * Labels_elm.GetHashCode();
                        }
                    }
                }

                if (ColumnMappings != null)
                {
                    foreach (var ColumnMappings_elm in ColumnMappings)
                    {
                        if (ColumnMappings_elm != null)
                        {
                            hash ^= 397 * ColumnMappings_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::industry9.Client.Data.WidgetType _value_type;
        private global::System.Boolean _set_type;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? _value_labels;
        private global::System.Boolean _set_labels;
        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ColumnMappingDataInput?>? _value_columnMappings;
        private global::System.Boolean _set_columnMappings;
        public global::System.String? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IWidgetInputInfo.IsIdSet => _set_id;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IWidgetInputInfo.IsNameSet => _set_name;
        public global::industry9.Client.Data.WidgetType Type
        {
            get => _value_type;
            set
            {
                _set_type = true;
                _value_type = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IWidgetInputInfo.IsTypeSet => _set_type;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.LabelDataInput?>? Labels
        {
            get => _value_labels;
            set
            {
                _set_labels = true;
                _value_labels = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IWidgetInputInfo.IsLabelsSet => _set_labels;
        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.ColumnMappingDataInput?>? ColumnMappings
        {
            get => _value_columnMappings;
            set
            {
                _set_columnMappings = true;
                _value_columnMappings = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IWidgetInputInfo.IsColumnMappingsSet => _set_columnMappings;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ColumnMappingDataInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "ColumnMappingDataInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::industry9.Client.Data.ColumnMappingDataInput;
            var inputInfo = runtimeValue as global::industry9.Client.Data.State.IColumnMappingDataInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsFormatSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("format", FormatFormat(input.Format)));
            }

            if (inputInfo.IsDataSourceIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("dataSourceId", FormatDataSourceId(input.DataSourceId)));
            }

            if (inputInfo.IsSourceColumnSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sourceColumn", FormatSourceColumn(input.SourceColumn)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFormat(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDataSourceId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSourceColumn(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ColumnMappingDataInput : global::industry9.Client.Data.State.IColumnMappingDataInputInfo, global::System.IEquatable<ColumnMappingDataInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ColumnMappingDataInput)obj);
        }

        public virtual global::System.Boolean Equals(ColumnMappingDataInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Format is null && other.Format is null) || Format != null && Format.Equals(other.Format)) && ((DataSourceId is null && other.DataSourceId is null) || DataSourceId != null && DataSourceId.Equals(other.DataSourceId)) && ((SourceColumn is null && other.SourceColumn is null) || SourceColumn != null && SourceColumn.Equals(other.SourceColumn));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Format != null)
                {
                    hash ^= 397 * Format.GetHashCode();
                }

                if (DataSourceId != null)
                {
                    hash ^= 397 * DataSourceId.GetHashCode();
                }

                if (SourceColumn != null)
                {
                    hash ^= 397 * SourceColumn.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::System.String? _value_format;
        private global::System.Boolean _set_format;
        private global::System.String? _value_dataSourceId;
        private global::System.Boolean _set_dataSourceId;
        private global::System.String? _value_sourceColumn;
        private global::System.Boolean _set_sourceColumn;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IColumnMappingDataInputInfo.IsNameSet => _set_name;
        public global::System.String? Format
        {
            get => _value_format;
            set
            {
                _set_format = true;
                _value_format = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IColumnMappingDataInputInfo.IsFormatSet => _set_format;
        public global::System.String? DataSourceId
        {
            get => _value_dataSourceId;
            set
            {
                _set_dataSourceId = true;
                _value_dataSourceId = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IColumnMappingDataInputInfo.IsDataSourceIdSet => _set_dataSourceId;
        public global::System.String? SourceColumn
        {
            get => _value_sourceColumn;
            set
            {
                _set_sourceColumn = true;
                _value_sourceColumn = value;
            }
        }

        global::System.Boolean global::industry9.Client.Data.State.IColumnMappingDataInputInfo.IsSourceColumnSet => _set_sourceColumn;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public enum WidgetType
    {
        LineChart,
        BarChart,
        PieChart,
        Table
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class WidgetTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, WidgetType>
    {
        public global::System.String TypeName => "WidgetType";
        public WidgetType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "LINE_CHART" => WidgetType.LineChart, "BAR_CHART" => WidgetType.BarChart, "PIE_CHART" => WidgetType.PieChart, "TABLE" => WidgetType.Table, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            WidgetType.LineChart => "LINE_CHART", WidgetType.BarChart => "BAR_CHART", WidgetType.PieChart => "PIE_CHART", WidgetType.Table => "TABLE", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public enum DataSourceType
    {
        Random,
        DataQuery
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataSourceTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DataSourceType>
    {
        public global::System.String TypeName => "DataSourceType";
        public DataSourceType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "RANDOM" => DataSourceType.Random, "DATA_QUERY" => DataSourceType.DataQuery, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            DataSourceType.Random => "RANDOM", DataSourceType.DataQuery => "DATA_QUERY", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public enum ColumnValueType
    {
        String,
        Number,
        DateTime,
        Boolean
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ColumnValueTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ColumnValueType>
    {
        public global::System.String TypeName => "ColumnValueType";
        public ColumnValueType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "STRING" => ColumnValueType.String, "NUMBER" => ColumnValueType.Number, "DATE_TIME" => ColumnValueType.DateTime, "BOOLEAN" => ColumnValueType.Boolean, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            ColumnValueType.String => "STRING", ColumnValueType.Number => "NUMBER", ColumnValueType.DateTime => "DATE_TIME", ColumnValueType.Boolean => "BOOLEAN", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDashboards GraphQL operation
    /// <code>
    /// query GetDashboards {
    ///   dashboards {
    ///     __typename
    ///     ... DashboardLite
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardLite on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDashboardsQueryDocument()
        {
        }

        public static GetDashboardsQueryDocument Instance { get; } = new GetDashboardsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d8cf18cb6ab350ba523106807bb4ffef");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDashboards GraphQL operation
    /// <code>
    /// query GetDashboards {
    ///   dashboards {
    ///     __typename
    ///     ... DashboardLite
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardLite on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsQuery : global::industry9.Client.Data.IGetDashboardsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDashboardsResult> _operationExecutor;
        public GetDashboardsQuery(global::StrawberryShake.IOperationExecutor<IGetDashboardsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDashboardsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDashboardsQueryDocument.Instance.Hash.Value, name: "GetDashboards", document: GetDashboardsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDashboards GraphQL operation
    /// <code>
    /// query GetDashboards {
    ///   dashboards {
    ///     __typename
    ///     ... DashboardLite
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardLite on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboardsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDashboardsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDashboard GraphQL operation
    /// <code>
    /// query GetDashboard($id: String!) {
    ///   dashboard(id: $id) {
    ///     __typename
    ///     ... DashboardDetail
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardDetail on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   columnCount
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   widgets {
    ///     __typename
    ///     ... DashboardWidget
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment DashboardWidget on DashboardWidgetData {
    ///   widgetId
    ///   widget {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    ///   size {
    ///     __typename
    ///     ... Size
    ///   }
    ///   position {
    ///     __typename
    ///     ... Position
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// 
    /// fragment Size on Size {
    ///   width
    ///   height
    /// }
    /// 
    /// fragment Position on Position {
    ///   x
    ///   y
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDashboardQueryDocument()
        {
        }

        public static GetDashboardQueryDocument Instance { get; } = new GetDashboardQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7d, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x78, 0x20, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a2d040192225b1a4832ee4321e912e36");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDashboard GraphQL operation
    /// <code>
    /// query GetDashboard($id: String!) {
    ///   dashboard(id: $id) {
    ///     __typename
    ///     ... DashboardDetail
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardDetail on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   columnCount
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   widgets {
    ///     __typename
    ///     ... DashboardWidget
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment DashboardWidget on DashboardWidgetData {
    ///   widgetId
    ///   widget {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    ///   size {
    ///     __typename
    ///     ... Size
    ///   }
    ///   position {
    ///     __typename
    ///     ... Position
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// 
    /// fragment Size on Size {
    ///   width
    ///   height
    /// }
    /// 
    /// fragment Position on Position {
    ///   x
    ///   y
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardQuery : global::industry9.Client.Data.IGetDashboardQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDashboardQuery(global::StrawberryShake.IOperationExecutor<IGetDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDashboardResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDashboardResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDashboardQueryDocument.Instance.Hash.Value, name: "GetDashboard", document: GetDashboardQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDashboard GraphQL operation
    /// <code>
    /// query GetDashboard($id: String!) {
    ///   dashboard(id: $id) {
    ///     __typename
    ///     ... DashboardDetail
    ///     ... on Dashboard {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DashboardDetail on Dashboard {
    ///   id
    ///   name
    ///   private
    ///   columnCount
    ///   authorId
    ///   created
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   widgets {
    ///     __typename
    ///     ... DashboardWidget
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment DashboardWidget on DashboardWidgetData {
    ///   widgetId
    ///   widget {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    ///   size {
    ///     __typename
    ///     ... Size
    ///   }
    ///   position {
    ///     __typename
    ///     ... Position
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// 
    /// fragment Size on Size {
    ///   width
    ///   height
    /// }
    /// 
    /// fragment Position on Position {
    ///   x
    ///   y
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDashboardQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDashboardResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDashboardResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpsertDashboard GraphQL operation
    /// <code>
    /// mutation UpsertDashboard($dashboard: DashboardInput!) {
    ///   upsertDashboard(dashboard: $dashboard)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardMutationDocument : global::StrawberryShake.IDocument
    {
        private UpsertDashboardMutationDocument()
        {
        }

        public static UpsertDashboardMutationDocument Instance { get; } = new UpsertDashboardMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6897365492d6d95a0fdac5ec36ebfb9d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertDashboard GraphQL operation
    /// <code>
    /// mutation UpsertDashboard($dashboard: DashboardInput!) {
    ///   upsertDashboard(dashboard: $dashboard)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardMutation : global::industry9.Client.Data.IUpsertDashboardMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpsertDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dashboardInputFormatter;
        public UpsertDashboardMutation(global::StrawberryShake.IOperationExecutor<IUpsertDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dashboardInputFormatter = serializerResolver.GetInputValueFormatter("DashboardInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpsertDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertDashboardResult>> ExecuteAsync(global::industry9.Client.Data.DashboardInput dashboard, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(dashboard);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertDashboardResult>> Watch(global::industry9.Client.Data.DashboardInput dashboard, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dashboard);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::industry9.Client.Data.DashboardInput dashboard)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dashboard", FormatDashboard(dashboard));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpsertDashboardMutationDocument.Instance.Hash.Value, name: "UpsertDashboard", document: UpsertDashboardMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDashboard(global::industry9.Client.Data.DashboardInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _dashboardInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertDashboard GraphQL operation
    /// <code>
    /// mutation UpsertDashboard($dashboard: DashboardInput!) {
    ///   upsertDashboard(dashboard: $dashboard)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertDashboardMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertDashboardResult>> ExecuteAsync(global::industry9.Client.Data.DashboardInput dashboard, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertDashboardResult>> Watch(global::industry9.Client.Data.DashboardInput dashboard, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteDashboard GraphQL operation
    /// <code>
    /// mutation DeleteDashboard($id: String!) {
    ///   deleteDashboard(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteDashboardMutationDocument()
        {
        }

        public static DeleteDashboardMutationDocument Instance { get; } = new DeleteDashboardMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "736b30e8be7c075ac1ae3c1642ae14c3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteDashboard GraphQL operation
    /// <code>
    /// mutation DeleteDashboard($id: String!) {
    ///   deleteDashboard(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardMutation : global::industry9.Client.Data.IDeleteDashboardMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public DeleteDashboardMutation(global::StrawberryShake.IOperationExecutor<IDeleteDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteDashboardResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteDashboardResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteDashboardMutationDocument.Instance.Hash.Value, name: "DeleteDashboard", document: DeleteDashboardMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteDashboard GraphQL operation
    /// <code>
    /// mutation DeleteDashboard($id: String!) {
    ///   deleteDashboard(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteDashboardMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteDashboardResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteDashboardResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinitions GraphQL operation
    /// <code>
    /// query GetDataSourceDefinitions {
    ///   dataSourceDefinitions {
    ///     __typename
    ///     ... DataSourceDefinitionLite
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionLite on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDataSourceDefinitionsQueryDocument()
        {
        }

        public static GetDataSourceDefinitionsQueryDocument Instance { get; } = new GetDataSourceDefinitionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9e32d8e355db29f975dcdbe54f2fce94");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinitions GraphQL operation
    /// <code>
    /// query GetDataSourceDefinitions {
    ///   dataSourceDefinitions {
    ///     __typename
    ///     ... DataSourceDefinitionLite
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionLite on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsQuery : global::industry9.Client.Data.IGetDataSourceDefinitionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDataSourceDefinitionsResult> _operationExecutor;
        public GetDataSourceDefinitionsQuery(global::StrawberryShake.IOperationExecutor<IGetDataSourceDefinitionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDataSourceDefinitionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDataSourceDefinitionsQueryDocument.Instance.Hash.Value, name: "GetDataSourceDefinitions", document: GetDataSourceDefinitionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinitions GraphQL operation
    /// <code>
    /// query GetDataSourceDefinitions {
    ///   dataSourceDefinitions {
    ///     __typename
    ///     ... DataSourceDefinitionLite
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionLite on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinition GraphQL operation
    /// <code>
    /// query GetDataSourceDefinition($id: String!) {
    ///   dataSourceDefinition(id: $id) {
    ///     __typename
    ///     ... DataSourceDefinitionDetail
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionDetail on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   inputs
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDataSourceDefinitionQueryDocument()
        {
        }

        public static GetDataSourceDefinitionQueryDocument Instance { get; } = new GetDataSourceDefinitionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "635ee96fdef320beddffa35068a827f7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinition GraphQL operation
    /// <code>
    /// query GetDataSourceDefinition($id: String!) {
    ///   dataSourceDefinition(id: $id) {
    ///     __typename
    ///     ... DataSourceDefinitionDetail
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionDetail on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   inputs
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionQuery : global::industry9.Client.Data.IGetDataSourceDefinitionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDataSourceDefinitionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDataSourceDefinitionQuery(global::StrawberryShake.IOperationExecutor<IGetDataSourceDefinitionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDataSourceDefinitionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDataSourceDefinitionQueryDocument.Instance.Hash.Value, name: "GetDataSourceDefinition", document: GetDataSourceDefinitionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDataSourceDefinition GraphQL operation
    /// <code>
    /// query GetDataSourceDefinition($id: String!) {
    ///   dataSourceDefinition(id: $id) {
    ///     __typename
    ///     ... DataSourceDefinitionDetail
    ///     ... on DataSourceDefinition {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DataSourceDefinitionDetail on DataSourceDefinition {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   inputs
    ///   columns {
    ///     __typename
    ///     ... ExportedColumn
    ///   }
    /// }
    /// 
    /// fragment ExportedColumn on ExportedColumnData {
    ///   name
    ///   valueType
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetDataSourceDefinitionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchRandomDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchRandomDataSourceProperties($id: String!) {
    ///   fetchRandomPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     min
    ///     max
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchRandomDataSourcePropertiesQueryDocument()
        {
        }

        public static FetchRandomDataSourcePropertiesQueryDocument Instance { get; } = new FetchRandomDataSourcePropertiesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "080cb0c7599979cb59dbcc1b190c382a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchRandomDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchRandomDataSourceProperties($id: String!) {
    ///   fetchRandomPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     min
    ///     max
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesQuery : global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchRandomDataSourcePropertiesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public FetchRandomDataSourcePropertiesQuery(global::StrawberryShake.IOperationExecutor<IFetchRandomDataSourcePropertiesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchRandomDataSourcePropertiesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchRandomDataSourcePropertiesResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchRandomDataSourcePropertiesResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchRandomDataSourcePropertiesQueryDocument.Instance.Hash.Value, name: "FetchRandomDataSourceProperties", document: FetchRandomDataSourcePropertiesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchRandomDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchRandomDataSourceProperties($id: String!) {
    ///   fetchRandomPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     min
    ///     max
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchRandomDataSourcePropertiesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchRandomDataSourcePropertiesResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchRandomDataSourcePropertiesResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchQueryDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchQueryDataSourceProperties($id: String!) {
    ///   fetchDataQueryPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     query
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchQueryDataSourcePropertiesQueryDocument()
        {
        }

        public static FetchQueryDataSourcePropertiesQueryDocument Instance { get; } = new FetchQueryDataSourcePropertiesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "95be020506647fe2d2b2d01f0b58dddc");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchQueryDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchQueryDataSourceProperties($id: String!) {
    ///   fetchDataQueryPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     query
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesQuery : global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchQueryDataSourcePropertiesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public FetchQueryDataSourcePropertiesQuery(global::StrawberryShake.IOperationExecutor<IFetchQueryDataSourcePropertiesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchQueryDataSourcePropertiesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchQueryDataSourcePropertiesResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchQueryDataSourcePropertiesResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchQueryDataSourcePropertiesQueryDocument.Instance.Hash.Value, name: "FetchQueryDataSourceProperties", document: FetchQueryDataSourcePropertiesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchQueryDataSourceProperties GraphQL operation
    /// <code>
    /// query FetchQueryDataSourceProperties($id: String!) {
    ///   fetchDataQueryPropertiesFromDataSource(dataSourceId: $id) {
    ///     __typename
    ///     query
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IFetchQueryDataSourcePropertiesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchQueryDataSourcePropertiesResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchQueryDataSourcePropertiesResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpsertDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation UpsertDataSourceDefinition($definition: DataSourceDefinitionInput!) {
    ///   upsertDataSourceDefinition(dataSourceDefinition: $definition)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionMutationDocument : global::StrawberryShake.IDocument
    {
        private UpsertDataSourceDefinitionMutationDocument()
        {
        }

        public static UpsertDataSourceDefinitionMutationDocument Instance { get; } = new UpsertDataSourceDefinitionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4da4c6b0f2b294dc5efe484306366116");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation UpsertDataSourceDefinition($definition: DataSourceDefinitionInput!) {
    ///   upsertDataSourceDefinition(dataSourceDefinition: $definition)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionMutation : global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpsertDataSourceDefinitionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dataSourceDefinitionInputFormatter;
        public UpsertDataSourceDefinitionMutation(global::StrawberryShake.IOperationExecutor<IUpsertDataSourceDefinitionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dataSourceDefinitionInputFormatter = serializerResolver.GetInputValueFormatter("DataSourceDefinitionInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpsertDataSourceDefinitionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> ExecuteAsync(global::industry9.Client.Data.DataSourceDefinitionInput definition, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(definition);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> Watch(global::industry9.Client.Data.DataSourceDefinitionInput definition, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(definition);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::industry9.Client.Data.DataSourceDefinitionInput definition)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("definition", FormatDefinition(definition));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpsertDataSourceDefinitionMutationDocument.Instance.Hash.Value, name: "UpsertDataSourceDefinition", document: UpsertDataSourceDefinitionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDefinition(global::industry9.Client.Data.DataSourceDefinitionInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _dataSourceDefinitionInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation UpsertDataSourceDefinition($definition: DataSourceDefinitionInput!) {
    ///   upsertDataSourceDefinition(dataSourceDefinition: $definition)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertDataSourceDefinitionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> ExecuteAsync(global::industry9.Client.Data.DataSourceDefinitionInput definition, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> Watch(global::industry9.Client.Data.DataSourceDefinitionInput definition, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation DeleteDataSourceDefinition($id: String!) {
    ///   deleteDataSourceDefinition(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteDataSourceDefinitionMutationDocument()
        {
        }

        public static DeleteDataSourceDefinitionMutationDocument Instance { get; } = new DeleteDataSourceDefinitionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "649035b9b86d66a1e4b0b6b4e95a05f9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation DeleteDataSourceDefinition($id: String!) {
    ///   deleteDataSourceDefinition(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionMutation : global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteDataSourceDefinitionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public DeleteDataSourceDefinitionMutation(global::StrawberryShake.IOperationExecutor<IDeleteDataSourceDefinitionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteDataSourceDefinitionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteDataSourceDefinitionResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteDataSourceDefinitionResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteDataSourceDefinitionMutationDocument.Instance.Hash.Value, name: "DeleteDataSourceDefinition", document: DeleteDataSourceDefinitionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation DeleteDataSourceDefinition($id: String!) {
    ///   deleteDataSourceDefinition(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteDataSourceDefinitionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteDataSourceDefinitionResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteDataSourceDefinitionResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AssignRandomDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignRandomDataSourceProperties($definitionId: String!, $properties: RandomDataSourcePropertiesInput!) {
    ///   assignRandomPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesMutationDocument : global::StrawberryShake.IDocument
    {
        private AssignRandomDataSourcePropertiesMutationDocument()
        {
        }

        public static AssignRandomDataSourcePropertiesMutationDocument Instance { get; } = new AssignRandomDataSourcePropertiesMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x28, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "770fb2dc0aa7345f761779cb06072544");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignRandomDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignRandomDataSourceProperties($definitionId: String!, $properties: RandomDataSourcePropertiesInput!) {
    ///   assignRandomPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesMutation : global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAssignRandomDataSourcePropertiesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _randomDataSourcePropertiesInputFormatter;
        public AssignRandomDataSourcePropertiesMutation(global::StrawberryShake.IOperationExecutor<IAssignRandomDataSourcePropertiesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _randomDataSourcePropertiesInputFormatter = serializerResolver.GetInputValueFormatter("RandomDataSourcePropertiesInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAssignRandomDataSourcePropertiesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignRandomDataSourcePropertiesResult>> ExecuteAsync(global::System.String definitionId, global::industry9.Client.Data.RandomDataSourcePropertiesInput properties, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(definitionId, properties);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignRandomDataSourcePropertiesResult>> Watch(global::System.String definitionId, global::industry9.Client.Data.RandomDataSourcePropertiesInput properties, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(definitionId, properties);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String definitionId, global::industry9.Client.Data.RandomDataSourcePropertiesInput properties)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("definitionId", FormatDefinitionId(definitionId));
            variables.Add("properties", FormatProperties(properties));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AssignRandomDataSourcePropertiesMutationDocument.Instance.Hash.Value, name: "AssignRandomDataSourceProperties", document: AssignRandomDataSourcePropertiesMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDefinitionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatProperties(global::industry9.Client.Data.RandomDataSourcePropertiesInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _randomDataSourcePropertiesInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignRandomDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignRandomDataSourceProperties($definitionId: String!, $properties: RandomDataSourcePropertiesInput!) {
    ///   assignRandomPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAssignRandomDataSourcePropertiesMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignRandomDataSourcePropertiesResult>> ExecuteAsync(global::System.String definitionId, global::industry9.Client.Data.RandomDataSourcePropertiesInput properties, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignRandomDataSourcePropertiesResult>> Watch(global::System.String definitionId, global::industry9.Client.Data.RandomDataSourcePropertiesInput properties, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AssignQueryDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignQueryDataSourceProperties($definitionId: String!, $properties: DataQueryDataSourcePropertiesInput!) {
    ///   assignDataQueryPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesMutationDocument : global::StrawberryShake.IDocument
    {
        private AssignQueryDataSourcePropertiesMutationDocument()
        {
        }

        public static AssignQueryDataSourcePropertiesMutationDocument Instance { get; } = new AssignQueryDataSourcePropertiesMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x28, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "890dd508b209f2e5967e5e566ea9e378");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignQueryDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignQueryDataSourceProperties($definitionId: String!, $properties: DataQueryDataSourcePropertiesInput!) {
    ///   assignDataQueryPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesMutation : global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAssignQueryDataSourcePropertiesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dataQueryDataSourcePropertiesInputFormatter;
        public AssignQueryDataSourcePropertiesMutation(global::StrawberryShake.IOperationExecutor<IAssignQueryDataSourcePropertiesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dataQueryDataSourcePropertiesInputFormatter = serializerResolver.GetInputValueFormatter("DataQueryDataSourcePropertiesInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAssignQueryDataSourcePropertiesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignQueryDataSourcePropertiesResult>> ExecuteAsync(global::System.String definitionId, global::industry9.Client.Data.DataQueryDataSourcePropertiesInput properties, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(definitionId, properties);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignQueryDataSourcePropertiesResult>> Watch(global::System.String definitionId, global::industry9.Client.Data.DataQueryDataSourcePropertiesInput properties, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(definitionId, properties);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String definitionId, global::industry9.Client.Data.DataQueryDataSourcePropertiesInput properties)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("definitionId", FormatDefinitionId(definitionId));
            variables.Add("properties", FormatProperties(properties));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AssignQueryDataSourcePropertiesMutationDocument.Instance.Hash.Value, name: "AssignQueryDataSourceProperties", document: AssignQueryDataSourcePropertiesMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDefinitionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatProperties(global::industry9.Client.Data.DataQueryDataSourcePropertiesInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _dataQueryDataSourcePropertiesInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignQueryDataSourceProperties GraphQL operation
    /// <code>
    /// mutation AssignQueryDataSourceProperties($definitionId: String!, $properties: DataQueryDataSourcePropertiesInput!) {
    ///   assignDataQueryPropertiesToDataSource(dataSourceId: $definitionId, properties: $properties)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAssignQueryDataSourcePropertiesMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignQueryDataSourcePropertiesResult>> ExecuteAsync(global::System.String definitionId, global::industry9.Client.Data.DataQueryDataSourcePropertiesInput properties, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignQueryDataSourcePropertiesResult>> Watch(global::System.String definitionId, global::industry9.Client.Data.DataQueryDataSourcePropertiesInput properties, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnDataReceived GraphQL operation
    /// <code>
    /// subscription OnDataReceived($dataSourceId: ID!) {
    ///   onDataReceived(dataSourceId: $dataSourceId) {
    ///     __typename
    ///     name
    ///     value
    ///     dataSourceId
    ///     timestamp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnDataReceivedSubscriptionDocument()
        {
        }

        public static OnDataReceivedSubscriptionDocument Instance { get; } = new OnDataReceivedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x28, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2abd9ee5312d3431ccbc1002e113601c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnDataReceived GraphQL operation
    /// <code>
    /// subscription OnDataReceived($dataSourceId: ID!) {
    ///   onDataReceived(dataSourceId: $dataSourceId) {
    ///     __typename
    ///     name
    ///     value
    ///     dataSourceId
    ///     timestamp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedSubscription : global::industry9.Client.Data.IOnDataReceivedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnDataReceivedResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public OnDataReceivedSubscription(global::StrawberryShake.IOperationExecutor<IOnDataReceivedResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnDataReceivedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnDataReceivedResult>> Watch(global::System.String dataSourceId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dataSourceId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String dataSourceId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dataSourceId", FormatDataSourceId(dataSourceId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnDataReceivedSubscriptionDocument.Instance.Hash.Value, name: "OnDataReceived", document: OnDataReceivedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDataSourceId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the OnDataReceived GraphQL operation
    /// <code>
    /// subscription OnDataReceived($dataSourceId: ID!) {
    ///   onDataReceived(dataSourceId: $dataSourceId) {
    ///     __typename
    ///     name
    ///     value
    ///     dataSourceId
    ///     timestamp
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IOnDataReceivedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnDataReceivedResult>> Watch(global::System.String dataSourceId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetWidgets GraphQL operation
    /// <code>
    /// query GetWidgets {
    ///   widgets {
    ///     __typename
    ///     ... WidgetLite
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetLite on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetWidgetsQueryDocument()
        {
        }

        public static GetWidgetsQueryDocument Instance { get; } = new GetWidgetsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5469daf3de7a5589f09b4700e87903b8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWidgets GraphQL operation
    /// <code>
    /// query GetWidgets {
    ///   widgets {
    ///     __typename
    ///     ... WidgetLite
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetLite on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsQuery : global::industry9.Client.Data.IGetWidgetsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetWidgetsResult> _operationExecutor;
        public GetWidgetsQuery(global::StrawberryShake.IOperationExecutor<IGetWidgetsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetWidgetsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWidgetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWidgetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetWidgetsQueryDocument.Instance.Hash.Value, name: "GetWidgets", document: GetWidgetsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWidgets GraphQL operation
    /// <code>
    /// query GetWidgets {
    ///   widgets {
    ///     __typename
    ///     ... WidgetLite
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetLite on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgetsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWidgetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWidgetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetWidget GraphQL operation
    /// <code>
    /// query GetWidget($id: String!) {
    ///   widget(id: $id) {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetQueryDocument : global::StrawberryShake.IDocument
    {
        private GetWidgetQueryDocument()
        {
        }

        public static GetWidgetQueryDocument Instance { get; } = new GetWidgetQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a5a3ed08344445ea85fbf7ab92f1a141");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWidget GraphQL operation
    /// <code>
    /// query GetWidget($id: String!) {
    ///   widget(id: $id) {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetQuery : global::industry9.Client.Data.IGetWidgetQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetWidgetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetWidgetQuery(global::StrawberryShake.IOperationExecutor<IGetWidgetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetWidgetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWidgetResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWidgetResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetWidgetQueryDocument.Instance.Hash.Value, name: "GetWidget", document: GetWidgetQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWidget GraphQL operation
    /// <code>
    /// query GetWidget($id: String!) {
    ///   widget(id: $id) {
    ///     __typename
    ///     ... WidgetDetail
    ///     ... on Widget {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment WidgetDetail on Widget {
    ///   id
    ///   name
    ///   created
    ///   type
    ///   labels {
    ///     __typename
    ///     ... Label
    ///   }
    ///   columnMappings {
    ///     __typename
    ///     ... ColumnMapping
    ///   }
    /// }
    /// 
    /// fragment Label on LabelData {
    ///   name
    /// }
    /// 
    /// fragment ColumnMapping on ColumnMappingData {
    ///   name
    ///   format
    ///   dataSourceId
    ///   sourceColumn
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IGetWidgetQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWidgetResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWidgetResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpsertWidget GraphQL operation
    /// <code>
    /// mutation UpsertWidget($widget: WidgetInput!) {
    ///   upsertWidget(widget: $widget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetMutationDocument : global::StrawberryShake.IDocument
    {
        private UpsertWidgetMutationDocument()
        {
        }

        public static UpsertWidgetMutationDocument Instance { get; } = new UpsertWidgetMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x24, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "540956f85a993dfd7d67315740f79963");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertWidget GraphQL operation
    /// <code>
    /// mutation UpsertWidget($widget: WidgetInput!) {
    ///   upsertWidget(widget: $widget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetMutation : global::industry9.Client.Data.IUpsertWidgetMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpsertWidgetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _widgetInputFormatter;
        public UpsertWidgetMutation(global::StrawberryShake.IOperationExecutor<IUpsertWidgetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _widgetInputFormatter = serializerResolver.GetInputValueFormatter("WidgetInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpsertWidgetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertWidgetResult>> ExecuteAsync(global::industry9.Client.Data.WidgetInput widget, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(widget);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertWidgetResult>> Watch(global::industry9.Client.Data.WidgetInput widget, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(widget);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::industry9.Client.Data.WidgetInput widget)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("widget", FormatWidget(widget));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpsertWidgetMutationDocument.Instance.Hash.Value, name: "UpsertWidget", document: UpsertWidgetMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWidget(global::industry9.Client.Data.WidgetInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _widgetInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpsertWidget GraphQL operation
    /// <code>
    /// mutation UpsertWidget($widget: WidgetInput!) {
    ///   upsertWidget(widget: $widget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IUpsertWidgetMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertWidgetResult>> ExecuteAsync(global::industry9.Client.Data.WidgetInput widget, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertWidgetResult>> Watch(global::industry9.Client.Data.WidgetInput widget, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteWidget GraphQL operation
    /// <code>
    /// mutation DeleteWidget($id: String!) {
    ///   deleteWidget(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteWidgetMutationDocument()
        {
        }

        public static DeleteWidgetMutationDocument Instance { get; } = new DeleteWidgetMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4859d83bb3d7d8f5982f242b4aee97ad");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteWidget GraphQL operation
    /// <code>
    /// mutation DeleteWidget($id: String!) {
    ///   deleteWidget(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetMutation : global::industry9.Client.Data.IDeleteWidgetMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteWidgetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public DeleteWidgetMutation(global::StrawberryShake.IOperationExecutor<IDeleteWidgetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteWidgetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteWidgetResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteWidgetResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteWidgetMutationDocument.Instance.Hash.Value, name: "DeleteWidget", document: DeleteWidgetMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteWidget GraphQL operation
    /// <code>
    /// mutation DeleteWidget($id: String!) {
    ///   deleteWidget(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IDeleteWidgetMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteWidgetResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteWidgetResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddWidgetToDashboard GraphQL operation
    /// <code>
    /// mutation AddWidgetToDashboard($dashboardWidget: DashboardWidgetInput!) {
    ///   addWidgetToDashboard(widget: $dashboardWidget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardMutationDocument : global::StrawberryShake.IDocument
    {
        private AddWidgetToDashboardMutationDocument()
        {
        }

        public static AddWidgetToDashboardMutationDocument Instance { get; } = new AddWidgetToDashboardMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "59d8a95474d2c8922030617665d53607");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddWidgetToDashboard GraphQL operation
    /// <code>
    /// mutation AddWidgetToDashboard($dashboardWidget: DashboardWidgetInput!) {
    ///   addWidgetToDashboard(widget: $dashboardWidget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardMutation : global::industry9.Client.Data.IAddWidgetToDashboardMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddWidgetToDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dashboardWidgetInputFormatter;
        public AddWidgetToDashboardMutation(global::StrawberryShake.IOperationExecutor<IAddWidgetToDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dashboardWidgetInputFormatter = serializerResolver.GetInputValueFormatter("DashboardWidgetInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddWidgetToDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddWidgetToDashboardResult>> ExecuteAsync(global::industry9.Client.Data.DashboardWidgetInput dashboardWidget, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(dashboardWidget);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddWidgetToDashboardResult>> Watch(global::industry9.Client.Data.DashboardWidgetInput dashboardWidget, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dashboardWidget);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::industry9.Client.Data.DashboardWidgetInput dashboardWidget)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dashboardWidget", FormatDashboardWidget(dashboardWidget));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddWidgetToDashboardMutationDocument.Instance.Hash.Value, name: "AddWidgetToDashboard", document: AddWidgetToDashboardMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDashboardWidget(global::industry9.Client.Data.DashboardWidgetInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _dashboardWidgetInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddWidgetToDashboard GraphQL operation
    /// <code>
    /// mutation AddWidgetToDashboard($dashboardWidget: DashboardWidgetInput!) {
    ///   addWidgetToDashboard(widget: $dashboardWidget)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IAddWidgetToDashboardMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddWidgetToDashboardResult>> ExecuteAsync(global::industry9.Client.Data.DashboardWidgetInput dashboardWidget, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddWidgetToDashboardResult>> Watch(global::industry9.Client.Data.DashboardWidgetInput dashboardWidget, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RemoveWidgetFromDashboard GraphQL operation
    /// <code>
    /// mutation RemoveWidgetFromDashboard($dashboardId: String!, $widgetId: String!) {
    ///   removeWidgetFromDashboard(dashboardId: $dashboardId, widgetId: $widgetId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardMutationDocument : global::StrawberryShake.IDocument
    {
        private RemoveWidgetFromDashboardMutationDocument()
        {
        }

        public static RemoveWidgetFromDashboardMutationDocument Instance { get; } = new RemoveWidgetFromDashboardMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x28, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a9d97229745687a0fd4091162ed7adf2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveWidgetFromDashboard GraphQL operation
    /// <code>
    /// mutation RemoveWidgetFromDashboard($dashboardId: String!, $widgetId: String!) {
    ///   removeWidgetFromDashboard(dashboardId: $dashboardId, widgetId: $widgetId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardMutation : global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRemoveWidgetFromDashboardResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RemoveWidgetFromDashboardMutation(global::StrawberryShake.IOperationExecutor<IRemoveWidgetFromDashboardResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRemoveWidgetFromDashboardResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> ExecuteAsync(global::System.String dashboardId, global::System.String widgetId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(dashboardId, widgetId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> Watch(global::System.String dashboardId, global::System.String widgetId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(dashboardId, widgetId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String dashboardId, global::System.String widgetId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("dashboardId", FormatDashboardId(dashboardId));
            variables.Add("widgetId", FormatWidgetId(widgetId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RemoveWidgetFromDashboardMutationDocument.Instance.Hash.Value, name: "RemoveWidgetFromDashboard", document: RemoveWidgetFromDashboardMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDashboardId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatWidgetId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveWidgetFromDashboard GraphQL operation
    /// <code>
    /// mutation RemoveWidgetFromDashboard($dashboardId: String!, $widgetId: String!) {
    ///   removeWidgetFromDashboard(dashboardId: $dashboardId, widgetId: $widgetId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface IRemoveWidgetFromDashboardMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> ExecuteAsync(global::System.String dashboardId, global::System.String widgetId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult>> Watch(global::System.String dashboardId, global::System.String widgetId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the industry9Client GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class industry9Client : global::industry9.Client.Data.Iindustry9Client
    {
        private readonly global::industry9.Client.Data.IGetDashboardsQuery _getDashboards;
        private readonly global::industry9.Client.Data.IGetDashboardQuery _getDashboard;
        private readonly global::industry9.Client.Data.IUpsertDashboardMutation _upsertDashboard;
        private readonly global::industry9.Client.Data.IDeleteDashboardMutation _deleteDashboard;
        private readonly global::industry9.Client.Data.IGetDataSourceDefinitionsQuery _getDataSourceDefinitions;
        private readonly global::industry9.Client.Data.IGetDataSourceDefinitionQuery _getDataSourceDefinition;
        private readonly global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery _fetchRandomDataSourceProperties;
        private readonly global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery _fetchQueryDataSourceProperties;
        private readonly global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation _upsertDataSourceDefinition;
        private readonly global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation _deleteDataSourceDefinition;
        private readonly global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation _assignRandomDataSourceProperties;
        private readonly global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation _assignQueryDataSourceProperties;
        private readonly global::industry9.Client.Data.IOnDataReceivedSubscription _onDataReceived;
        private readonly global::industry9.Client.Data.IGetWidgetsQuery _getWidgets;
        private readonly global::industry9.Client.Data.IGetWidgetQuery _getWidget;
        private readonly global::industry9.Client.Data.IUpsertWidgetMutation _upsertWidget;
        private readonly global::industry9.Client.Data.IDeleteWidgetMutation _deleteWidget;
        private readonly global::industry9.Client.Data.IAddWidgetToDashboardMutation _addWidgetToDashboard;
        private readonly global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation _removeWidgetFromDashboard;
        public industry9Client(global::industry9.Client.Data.IGetDashboardsQuery getDashboards, global::industry9.Client.Data.IGetDashboardQuery getDashboard, global::industry9.Client.Data.IUpsertDashboardMutation upsertDashboard, global::industry9.Client.Data.IDeleteDashboardMutation deleteDashboard, global::industry9.Client.Data.IGetDataSourceDefinitionsQuery getDataSourceDefinitions, global::industry9.Client.Data.IGetDataSourceDefinitionQuery getDataSourceDefinition, global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery fetchRandomDataSourceProperties, global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery fetchQueryDataSourceProperties, global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation upsertDataSourceDefinition, global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation deleteDataSourceDefinition, global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation assignRandomDataSourceProperties, global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation assignQueryDataSourceProperties, global::industry9.Client.Data.IOnDataReceivedSubscription onDataReceived, global::industry9.Client.Data.IGetWidgetsQuery getWidgets, global::industry9.Client.Data.IGetWidgetQuery getWidget, global::industry9.Client.Data.IUpsertWidgetMutation upsertWidget, global::industry9.Client.Data.IDeleteWidgetMutation deleteWidget, global::industry9.Client.Data.IAddWidgetToDashboardMutation addWidgetToDashboard, global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation removeWidgetFromDashboard)
        {
            _getDashboards = getDashboards ?? throw new global::System.ArgumentNullException(nameof(getDashboards));
            _getDashboard = getDashboard ?? throw new global::System.ArgumentNullException(nameof(getDashboard));
            _upsertDashboard = upsertDashboard ?? throw new global::System.ArgumentNullException(nameof(upsertDashboard));
            _deleteDashboard = deleteDashboard ?? throw new global::System.ArgumentNullException(nameof(deleteDashboard));
            _getDataSourceDefinitions = getDataSourceDefinitions ?? throw new global::System.ArgumentNullException(nameof(getDataSourceDefinitions));
            _getDataSourceDefinition = getDataSourceDefinition ?? throw new global::System.ArgumentNullException(nameof(getDataSourceDefinition));
            _fetchRandomDataSourceProperties = fetchRandomDataSourceProperties ?? throw new global::System.ArgumentNullException(nameof(fetchRandomDataSourceProperties));
            _fetchQueryDataSourceProperties = fetchQueryDataSourceProperties ?? throw new global::System.ArgumentNullException(nameof(fetchQueryDataSourceProperties));
            _upsertDataSourceDefinition = upsertDataSourceDefinition ?? throw new global::System.ArgumentNullException(nameof(upsertDataSourceDefinition));
            _deleteDataSourceDefinition = deleteDataSourceDefinition ?? throw new global::System.ArgumentNullException(nameof(deleteDataSourceDefinition));
            _assignRandomDataSourceProperties = assignRandomDataSourceProperties ?? throw new global::System.ArgumentNullException(nameof(assignRandomDataSourceProperties));
            _assignQueryDataSourceProperties = assignQueryDataSourceProperties ?? throw new global::System.ArgumentNullException(nameof(assignQueryDataSourceProperties));
            _onDataReceived = onDataReceived ?? throw new global::System.ArgumentNullException(nameof(onDataReceived));
            _getWidgets = getWidgets ?? throw new global::System.ArgumentNullException(nameof(getWidgets));
            _getWidget = getWidget ?? throw new global::System.ArgumentNullException(nameof(getWidget));
            _upsertWidget = upsertWidget ?? throw new global::System.ArgumentNullException(nameof(upsertWidget));
            _deleteWidget = deleteWidget ?? throw new global::System.ArgumentNullException(nameof(deleteWidget));
            _addWidgetToDashboard = addWidgetToDashboard ?? throw new global::System.ArgumentNullException(nameof(addWidgetToDashboard));
            _removeWidgetFromDashboard = removeWidgetFromDashboard ?? throw new global::System.ArgumentNullException(nameof(removeWidgetFromDashboard));
        }

        public static global::System.String ClientName => "industry9Client";
        public global::industry9.Client.Data.IGetDashboardsQuery GetDashboards => _getDashboards;
        public global::industry9.Client.Data.IGetDashboardQuery GetDashboard => _getDashboard;
        public global::industry9.Client.Data.IUpsertDashboardMutation UpsertDashboard => _upsertDashboard;
        public global::industry9.Client.Data.IDeleteDashboardMutation DeleteDashboard => _deleteDashboard;
        public global::industry9.Client.Data.IGetDataSourceDefinitionsQuery GetDataSourceDefinitions => _getDataSourceDefinitions;
        public global::industry9.Client.Data.IGetDataSourceDefinitionQuery GetDataSourceDefinition => _getDataSourceDefinition;
        public global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery FetchRandomDataSourceProperties => _fetchRandomDataSourceProperties;
        public global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery FetchQueryDataSourceProperties => _fetchQueryDataSourceProperties;
        public global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation UpsertDataSourceDefinition => _upsertDataSourceDefinition;
        public global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation DeleteDataSourceDefinition => _deleteDataSourceDefinition;
        public global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation AssignRandomDataSourceProperties => _assignRandomDataSourceProperties;
        public global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation AssignQueryDataSourceProperties => _assignQueryDataSourceProperties;
        public global::industry9.Client.Data.IOnDataReceivedSubscription OnDataReceived => _onDataReceived;
        public global::industry9.Client.Data.IGetWidgetsQuery GetWidgets => _getWidgets;
        public global::industry9.Client.Data.IGetWidgetQuery GetWidget => _getWidget;
        public global::industry9.Client.Data.IUpsertWidgetMutation UpsertWidget => _upsertWidget;
        public global::industry9.Client.Data.IDeleteWidgetMutation DeleteWidget => _deleteWidget;
        public global::industry9.Client.Data.IAddWidgetToDashboardMutation AddWidgetToDashboard => _addWidgetToDashboard;
        public global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation RemoveWidgetFromDashboard => _removeWidgetFromDashboard;
    }

    /// <summary>
    /// Represents the industry9Client GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public interface Iindustry9Client
    {
        global::industry9.Client.Data.IGetDashboardsQuery GetDashboards { get; }

        global::industry9.Client.Data.IGetDashboardQuery GetDashboard { get; }

        global::industry9.Client.Data.IUpsertDashboardMutation UpsertDashboard { get; }

        global::industry9.Client.Data.IDeleteDashboardMutation DeleteDashboard { get; }

        global::industry9.Client.Data.IGetDataSourceDefinitionsQuery GetDataSourceDefinitions { get; }

        global::industry9.Client.Data.IGetDataSourceDefinitionQuery GetDataSourceDefinition { get; }

        global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery FetchRandomDataSourceProperties { get; }

        global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery FetchQueryDataSourceProperties { get; }

        global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation UpsertDataSourceDefinition { get; }

        global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation DeleteDataSourceDefinition { get; }

        global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation AssignRandomDataSourceProperties { get; }

        global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation AssignQueryDataSourceProperties { get; }

        global::industry9.Client.Data.IOnDataReceivedSubscription OnDataReceived { get; }

        global::industry9.Client.Data.IGetWidgetsQuery GetWidgets { get; }

        global::industry9.Client.Data.IGetWidgetQuery GetWidget { get; }

        global::industry9.Client.Data.IUpsertWidgetMutation UpsertWidget { get; }

        global::industry9.Client.Data.IDeleteWidgetMutation DeleteWidget { get; }

        global::industry9.Client.Data.IAddWidgetToDashboardMutation AddWidgetToDashboard { get; }

        global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation RemoveWidgetFromDashboard { get; }
    }
}

namespace industry9.Client.Data.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardEntity
    {
        public DashboardEntity(global::System.String id = default !, global::System.String? name = default !, global::System.Boolean @private = default !, global::System.String? authorId = default !, global::System.DateTimeOffset created = default !, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? labels = default !, global::System.Int32 columnCount = default !, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.DashboardWidgetDataData?>? widgets = default !)
        {
            Id = id;
            Name = name;
            Private = @private;
            AuthorId = authorId;
            Created = created;
            Labels = labels;
            ColumnCount = columnCount;
            Widgets = widgets;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.Boolean Private { get; }

        public global::System.String? AuthorId { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? Labels { get; }

        public global::System.Int32 ColumnCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.DashboardWidgetDataData?>? Widgets { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class WidgetEntity
    {
        public WidgetEntity(global::System.String id = default !, global::System.String? name = default !, global::System.DateTimeOffset created = default !, global::industry9.Client.Data.WidgetType type = default !, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? labels = default !, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? columnMappings = default !)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Labels = labels;
            ColumnMappings = columnMappings;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.WidgetType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? Labels { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? ColumnMappings { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataSourceDefinitionEntity
    {
        public DataSourceDefinitionEntity(global::System.String id = default !, global::System.String? name = default !, global::System.DateTimeOffset created = default !, global::industry9.Client.Data.DataSourceType type = default !, global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? columns = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? inputs = default !)
        {
            Id = id;
            Name = name;
            Created = created;
            Type = type;
            Columns = columns;
            Inputs = inputs;
        }

        public global::System.String Id { get; }

        public global::System.String? Name { get; }

        public global::System.DateTimeOffset Created { get; }

        public global::industry9.Client.Data.DataSourceType Type { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? Columns { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Inputs { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetDashboardsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboards_Dashboards_Dashboard> _getDashboards_Dashboards_DashboardFromDashboardEntityMapper;
        public GetDashboardsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboards_Dashboards_Dashboard> getDashboards_Dashboards_DashboardFromDashboardEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDashboards_Dashboards_DashboardFromDashboardEntityMapper = getDashboards_Dashboards_DashboardFromDashboardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDashboards_Dashboards_DashboardFromDashboardEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetDashboardsResult);
        public GetDashboardsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDashboardsResultInfo info)
            {
                return new GetDashboardsResult(MapIGetDashboards_DashboardsArray(info.Dashboards, snapshot));
            }

            throw new global::System.ArgumentException("GetDashboardsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards?>? MapIGetDashboards_DashboardsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dashboards = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboards_Dashboards?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                dashboards.Add(MapIGetDashboards_Dashboards(child, snapshot));
            }

            return dashboards;
        }

        private global::industry9.Client.Data.IGetDashboards_Dashboards? MapIGetDashboards_Dashboards(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dashboard", global::System.StringComparison.Ordinal))
            {
                return _getDashboards_Dashboards_DashboardFromDashboardEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.DashboardEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDashboardsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? dashboards, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Dashboards = dashboards;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Dashboards { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDashboardsResultInfo(Dashboards, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboards_Dashboards_DashboardFromDashboardEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboards_Dashboards_Dashboard>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDashboards_Dashboards_DashboardFromDashboardEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDashboards_Dashboards_Dashboard Map(global::industry9.Client.Data.State.DashboardEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDashboards_Dashboards_Dashboard(entity.Id, entity.Name, entity.Private, entity.AuthorId, entity.Created, MapIGetDashboards_Dashboards_LabelsArray(entity.Labels, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboards_Dashboards_Labels?>? MapIGetDashboards_Dashboards_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboards_Dashboards_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboards_Dashboards_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetDashboards_Dashboards_Labels? MapIGetDashboards_Dashboards_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboards_Dashboards_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboards_Dashboards_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboard_Dashboard_Dashboard> _getDashboard_Dashboard_DashboardFromDashboardEntityMapper;
        public GetDashboardResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboard_Dashboard_Dashboard> getDashboard_Dashboard_DashboardFromDashboardEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDashboard_Dashboard_DashboardFromDashboardEntityMapper = getDashboard_Dashboard_DashboardFromDashboardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDashboard_Dashboard_DashboardFromDashboardEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetDashboardResult);
        public GetDashboardResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDashboardResultInfo info)
            {
                return new GetDashboardResult(MapIGetDashboard_Dashboard(info.Dashboard, snapshot));
            }

            throw new global::System.ArgumentException("GetDashboardResultInfo expected.");
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard? MapIGetDashboard_Dashboard(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dashboard", global::System.StringComparison.Ordinal))
            {
                return _getDashboard_Dashboard_DashboardFromDashboardEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.DashboardEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDashboardResultInfo(global::StrawberryShake.EntityId? dashboard, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Dashboard = dashboard;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Dashboard { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDashboardResultInfo(Dashboard, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_DashboardFromDashboardEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, GetDashboard_Dashboard_Dashboard>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetDashboard_Dashboard_Widgets_Widget_Widget> _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper;
        public GetDashboard_Dashboard_DashboardFromDashboardEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetDashboard_Dashboard_Widgets_Widget_Widget> getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper = getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper));
        }

        public GetDashboard_Dashboard_Dashboard Map(global::industry9.Client.Data.State.DashboardEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDashboard_Dashboard_Dashboard(entity.Id, entity.Name, entity.Private, entity.ColumnCount, entity.AuthorId, entity.Created, MapIGetDashboard_Dashboard_LabelsArray(entity.Labels, snapshot), MapIGetDashboard_Dashboard_WidgetsArray(entity.Widgets, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Labels?>? MapIGetDashboard_Dashboard_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Labels? MapIGetDashboard_Dashboard_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets?>? MapIGetDashboard_Dashboard_WidgetsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.DashboardWidgetDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dashboardWidgetDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets?>();
            foreach (global::industry9.Client.Data.State.DashboardWidgetDataData? child in list)
            {
                dashboardWidgetDatas.Add(MapIGetDashboard_Dashboard_Widgets(child, snapshot));
            }

            return dashboardWidgetDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets? MapIGetDashboard_Dashboard_Widgets(global::industry9.Client.Data.State.DashboardWidgetDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets returnValue = default !;
            if (data?.__typename.Equals("DashboardWidgetData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_DashboardWidgetData(data.WidgetId, MapIGetDashboard_Dashboard_Widgets_Widget(data.Widget, snapshot), MapNonNullableIGetDashboard_Dashboard_Widgets_Size(data.Size ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetDashboard_Dashboard_Widgets_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget? MapIGetDashboard_Dashboard_Widgets_Widget(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                return _getDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.WidgetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels? MapIGetDashboard_Dashboard_Widgets_Widget_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var columnMappingDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>();
            foreach (global::industry9.Client.Data.State.ColumnMappingDataData? child in list)
            {
                columnMappingDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child, snapshot));
            }

            return columnMappingDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::industry9.Client.Data.State.ColumnMappingDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings returnValue = default !;
            if (data?.__typename.Equals("ColumnMappingData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData(data.Name, data.Format, data.DataSourceId, data.SourceColumn);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Size MapNonNullableIGetDashboard_Dashboard_Widgets_Size(global::industry9.Client.Data.State.SizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDashboard_Dashboard_Widgets_Size returnValue = default !;
            if (data.__typename.Equals("Size", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Size_Size(data.Width ?? throw new global::System.ArgumentNullException(), data.Height ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Position MapNonNullableIGetDashboard_Dashboard_Widgets_Position(global::industry9.Client.Data.State.PositionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDashboard_Dashboard_Widgets_Position returnValue = default !;
            if (data.__typename.Equals("Position", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Position_Position(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetDashboard_Dashboard_Widgets_Widget_Widget>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDashboard_Dashboard_Widgets_Widget_Widget Map(global::industry9.Client.Data.State.WidgetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDashboard_Dashboard_Widgets_Widget_Widget(entity.Id, entity.Name, entity.Created, entity.Type, MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(entity.Labels, snapshot), MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(entity.ColumnMappings, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels? MapIGetDashboard_Dashboard_Widgets_Widget_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var columnMappingDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>();
            foreach (global::industry9.Client.Data.State.ColumnMappingDataData? child in list)
            {
                columnMappingDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child, snapshot));
            }

            return columnMappingDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::industry9.Client.Data.State.ColumnMappingDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings returnValue = default !;
            if (data?.__typename.Equals("ColumnMappingData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData(data.Name, data.Format, data.DataSourceId, data.SourceColumn);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.UpsertDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpsertDashboardResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IUpsertDashboardResult);
        public UpsertDashboardResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpsertDashboardResultInfo info)
            {
                return new UpsertDashboardResult(info.UpsertDashboard);
            }

            throw new global::System.ArgumentException("UpsertDashboardResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpsertDashboardResultInfo(global::System.String? upsertDashboard, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpsertDashboard = upsertDashboard;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? UpsertDashboard { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpsertDashboardResultInfo(UpsertDashboard, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.DeleteDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteDashboardResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IDeleteDashboardResult);
        public DeleteDashboardResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteDashboardResultInfo info)
            {
                return new DeleteDashboardResult(info.DeleteDashboard);
            }

            throw new global::System.ArgumentException("DeleteDashboardResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteDashboardResultInfo(global::System.Boolean deleteDashboard, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteDashboard = deleteDashboard;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteDashboard { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteDashboardResultInfo(DeleteDashboard, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetDataSourceDefinitionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition> _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper;
        public GetDataSourceDefinitionsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition> getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper = getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetDataSourceDefinitionsResult);
        public GetDataSourceDefinitionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDataSourceDefinitionsResultInfo info)
            {
                return new GetDataSourceDefinitionsResult(MapIGetDataSourceDefinitions_DataSourceDefinitionsArray(info.DataSourceDefinitions, snapshot));
            }

            throw new global::System.ArgumentException("GetDataSourceDefinitionsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions?>? MapIGetDataSourceDefinitions_DataSourceDefinitionsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dataSourceDefinitions = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                dataSourceDefinitions.Add(MapIGetDataSourceDefinitions_DataSourceDefinitions(child, snapshot));
            }

            return dataSourceDefinitions;
        }

        private global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions? MapIGetDataSourceDefinitions_DataSourceDefinitions(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DataSourceDefinition", global::System.StringComparison.Ordinal))
            {
                return _getDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.DataSourceDefinitionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDataSourceDefinitionsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? dataSourceDefinitions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DataSourceDefinitions = dataSourceDefinitions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? DataSourceDefinitions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDataSourceDefinitionsResultInfo(DataSourceDefinitions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition Map(global::industry9.Client.Data.State.DataSourceDefinitionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition(entity.Id, entity.Name, entity.Created, entity.Type, MapIGetDataSourceDefinitions_DataSourceDefinitions_ColumnsArray(entity.Columns, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns?>? MapIGetDataSourceDefinitions_DataSourceDefinitions_ColumnsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var exportedColumnDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns?>();
            foreach (global::industry9.Client.Data.State.ExportedColumnDataData? child in list)
            {
                exportedColumnDatas.Add(MapIGetDataSourceDefinitions_DataSourceDefinitions_Columns(child, snapshot));
            }

            return exportedColumnDatas;
        }

        private global::industry9.Client.Data.IGetDataSourceDefinitions_DataSourceDefinitions_Columns? MapIGetDataSourceDefinitions_DataSourceDefinitions_Columns(global::industry9.Client.Data.State.ExportedColumnDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDataSourceDefinitions_DataSourceDefinitions_Columns returnValue = default !;
            if (data?.__typename.Equals("ExportedColumnData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDataSourceDefinitions_DataSourceDefinitions_Columns_ExportedColumnData(data.Name, data.ValueType ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition> _getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper;
        public GetDataSourceDefinitionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition> getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper = getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetDataSourceDefinitionResult);
        public GetDataSourceDefinitionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDataSourceDefinitionResultInfo info)
            {
                return new GetDataSourceDefinitionResult(MapIGetDataSourceDefinition_DataSourceDefinition(info.DataSourceDefinition, snapshot));
            }

            throw new global::System.ArgumentException("GetDataSourceDefinitionResultInfo expected.");
        }

        private global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition? MapIGetDataSourceDefinition_DataSourceDefinition(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DataSourceDefinition", global::System.StringComparison.Ordinal))
            {
                return _getDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.DataSourceDefinitionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDataSourceDefinitionResultInfo(global::StrawberryShake.EntityId? dataSourceDefinition, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DataSourceDefinition = dataSourceDefinition;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? DataSourceDefinition { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDataSourceDefinitionResultInfo(DataSourceDefinition, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition Map(global::industry9.Client.Data.State.DataSourceDefinitionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition(entity.Id, entity.Name, entity.Created, entity.Type, entity.Inputs, MapIGetDataSourceDefinition_DataSourceDefinition_ColumnsArray(entity.Columns, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns?>? MapIGetDataSourceDefinition_DataSourceDefinition_ColumnsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var exportedColumnDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns?>();
            foreach (global::industry9.Client.Data.State.ExportedColumnDataData? child in list)
            {
                exportedColumnDatas.Add(MapIGetDataSourceDefinition_DataSourceDefinition_Columns(child, snapshot));
            }

            return exportedColumnDatas;
        }

        private global::industry9.Client.Data.IGetDataSourceDefinition_DataSourceDefinition_Columns? MapIGetDataSourceDefinition_DataSourceDefinition_Columns(global::industry9.Client.Data.State.ExportedColumnDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDataSourceDefinition_DataSourceDefinition_Columns returnValue = default !;
            if (data?.__typename.Equals("ExportedColumnData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDataSourceDefinition_DataSourceDefinition_Columns_ExportedColumnData(data.Name, data.ValueType ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.FetchRandomDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchRandomDataSourcePropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult);
        public FetchRandomDataSourcePropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchRandomDataSourcePropertiesResultInfo info)
            {
                return new FetchRandomDataSourcePropertiesResult(MapIFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource(info.FetchRandomPropertiesFromDataSource, snapshot));
            }

            throw new global::System.ArgumentException("FetchRandomDataSourcePropertiesResultInfo expected.");
        }

        private global::industry9.Client.Data.IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource? MapIFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource(global::industry9.Client.Data.State.RandomDataSourcePropertiesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource returnValue = default !;
            if (data?.__typename.Equals("RandomDataSourceProperties", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new FetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource_RandomDataSourceProperties(data.Min ?? throw new global::System.ArgumentNullException(), data.Max ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchRandomDataSourcePropertiesResultInfo(global::industry9.Client.Data.State.RandomDataSourcePropertiesData? fetchRandomPropertiesFromDataSource, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FetchRandomPropertiesFromDataSource = fetchRandomPropertiesFromDataSource;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::industry9.Client.Data.State.RandomDataSourcePropertiesData? FetchRandomPropertiesFromDataSource { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchRandomDataSourcePropertiesResultInfo(FetchRandomPropertiesFromDataSource, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.FetchQueryDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchQueryDataSourcePropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult);
        public FetchQueryDataSourcePropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchQueryDataSourcePropertiesResultInfo info)
            {
                return new FetchQueryDataSourcePropertiesResult(MapIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(info.FetchDataQueryPropertiesFromDataSource, snapshot));
            }

            throw new global::System.ArgumentException("FetchQueryDataSourcePropertiesResultInfo expected.");
        }

        private global::industry9.Client.Data.IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource? MapIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(global::industry9.Client.Data.State.DataQueryDataSourcePropertiesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource returnValue = default !;
            if (data?.__typename.Equals("DataQueryDataSourceProperties", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new FetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource_DataQueryDataSourceProperties(data.Query);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchQueryDataSourcePropertiesResultInfo(global::industry9.Client.Data.State.DataQueryDataSourcePropertiesData? fetchDataQueryPropertiesFromDataSource, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FetchDataQueryPropertiesFromDataSource = fetchDataQueryPropertiesFromDataSource;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::industry9.Client.Data.State.DataQueryDataSourcePropertiesData? FetchDataQueryPropertiesFromDataSource { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchQueryDataSourcePropertiesResultInfo(FetchDataQueryPropertiesFromDataSource, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.UpsertDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpsertDataSourceDefinitionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IUpsertDataSourceDefinitionResult);
        public UpsertDataSourceDefinitionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpsertDataSourceDefinitionResultInfo info)
            {
                return new UpsertDataSourceDefinitionResult(info.UpsertDataSourceDefinition);
            }

            throw new global::System.ArgumentException("UpsertDataSourceDefinitionResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpsertDataSourceDefinitionResultInfo(global::System.String? upsertDataSourceDefinition, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpsertDataSourceDefinition = upsertDataSourceDefinition;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? UpsertDataSourceDefinition { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpsertDataSourceDefinitionResultInfo(UpsertDataSourceDefinition, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.DeleteDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteDataSourceDefinitionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IDeleteDataSourceDefinitionResult);
        public DeleteDataSourceDefinitionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteDataSourceDefinitionResultInfo info)
            {
                return new DeleteDataSourceDefinitionResult(info.DeleteDataSourceDefinition);
            }

            throw new global::System.ArgumentException("DeleteDataSourceDefinitionResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteDataSourceDefinitionResultInfo(global::System.Boolean deleteDataSourceDefinition, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteDataSourceDefinition = deleteDataSourceDefinition;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteDataSourceDefinition { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteDataSourceDefinitionResultInfo(DeleteDataSourceDefinition, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.AssignRandomDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AssignRandomDataSourcePropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult);
        public AssignRandomDataSourcePropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AssignRandomDataSourcePropertiesResultInfo info)
            {
                return new AssignRandomDataSourcePropertiesResult(info.AssignRandomPropertiesToDataSource);
            }

            throw new global::System.ArgumentException("AssignRandomDataSourcePropertiesResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AssignRandomDataSourcePropertiesResultInfo(global::System.Boolean assignRandomPropertiesToDataSource, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AssignRandomPropertiesToDataSource = assignRandomPropertiesToDataSource;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean AssignRandomPropertiesToDataSource { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AssignRandomDataSourcePropertiesResultInfo(AssignRandomPropertiesToDataSource, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.AssignQueryDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AssignQueryDataSourcePropertiesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult);
        public AssignQueryDataSourcePropertiesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AssignQueryDataSourcePropertiesResultInfo info)
            {
                return new AssignQueryDataSourcePropertiesResult(info.AssignDataQueryPropertiesToDataSource);
            }

            throw new global::System.ArgumentException("AssignQueryDataSourcePropertiesResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AssignQueryDataSourcePropertiesResultInfo(global::System.Boolean assignDataQueryPropertiesToDataSource, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AssignDataQueryPropertiesToDataSource = assignDataQueryPropertiesToDataSource;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean AssignDataQueryPropertiesToDataSource { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AssignQueryDataSourcePropertiesResultInfo(AssignDataQueryPropertiesToDataSource, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.OnDataReceivedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnDataReceivedResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IOnDataReceivedResult);
        public OnDataReceivedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnDataReceivedResultInfo info)
            {
                return new OnDataReceivedResult(MapIOnDataReceived_OnDataReceived(info.OnDataReceived, snapshot));
            }

            throw new global::System.ArgumentException("OnDataReceivedResultInfo expected.");
        }

        private global::industry9.Client.Data.IOnDataReceived_OnDataReceived? MapIOnDataReceived_OnDataReceived(global::industry9.Client.Data.State.SensorDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IOnDataReceived_OnDataReceived returnValue = default !;
            if (data?.__typename.Equals("SensorData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new OnDataReceived_OnDataReceived_SensorData(data.Name, data.Value ?? throw new global::System.ArgumentNullException(), data.DataSourceId, data.Timestamp ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnDataReceivedResultInfo(global::industry9.Client.Data.State.SensorDataData? onDataReceived, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OnDataReceived = onDataReceived;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::industry9.Client.Data.State.SensorDataData? OnDataReceived { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnDataReceivedResultInfo(OnDataReceived, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetWidgetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidgets_Widgets_Widget> _getWidgets_Widgets_WidgetFromWidgetEntityMapper;
        public GetWidgetsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidgets_Widgets_Widget> getWidgets_Widgets_WidgetFromWidgetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getWidgets_Widgets_WidgetFromWidgetEntityMapper = getWidgets_Widgets_WidgetFromWidgetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getWidgets_Widgets_WidgetFromWidgetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetWidgetsResult);
        public GetWidgetsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetWidgetsResultInfo info)
            {
                return new GetWidgetsResult(MapIGetWidgets_WidgetsArray(info.Widgets, snapshot));
            }

            throw new global::System.ArgumentException("GetWidgetsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets?>? MapIGetWidgets_WidgetsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var widgets = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetWidgets_Widgets?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                widgets.Add(MapIGetWidgets_Widgets(child, snapshot));
            }

            return widgets;
        }

        private global::industry9.Client.Data.IGetWidgets_Widgets? MapIGetWidgets_Widgets(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                return _getWidgets_Widgets_WidgetFromWidgetEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.WidgetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetWidgetsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? widgets, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Widgets = widgets;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Widgets { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetWidgetsResultInfo(Widgets, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgets_Widgets_WidgetFromWidgetEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidgets_Widgets_Widget>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetWidgets_Widgets_WidgetFromWidgetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetWidgets_Widgets_Widget Map(global::industry9.Client.Data.State.WidgetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetWidgets_Widgets_Widget(entity.Id, entity.Name, entity.Created, entity.Type, MapIGetWidgets_Widgets_LabelsArray(entity.Labels, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetWidgets_Widgets_Labels?>? MapIGetWidgets_Widgets_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetWidgets_Widgets_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetWidgets_Widgets_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetWidgets_Widgets_Labels? MapIGetWidgets_Widgets_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetWidgets_Widgets_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetWidgets_Widgets_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.GetWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidget_Widget_Widget> _getWidget_Widget_WidgetFromWidgetEntityMapper;
        public GetWidgetResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidget_Widget_Widget> getWidget_Widget_WidgetFromWidgetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getWidget_Widget_WidgetFromWidgetEntityMapper = getWidget_Widget_WidgetFromWidgetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getWidget_Widget_WidgetFromWidgetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IGetWidgetResult);
        public GetWidgetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetWidgetResultInfo info)
            {
                return new GetWidgetResult(MapIGetWidget_Widget(info.Widget, snapshot));
            }

            throw new global::System.ArgumentException("GetWidgetResultInfo expected.");
        }

        private global::industry9.Client.Data.IGetWidget_Widget? MapIGetWidget_Widget(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                return _getWidget_Widget_WidgetFromWidgetEntityMapper.Map(snapshot.GetEntity<global::industry9.Client.Data.State.WidgetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetWidgetResultInfo(global::StrawberryShake.EntityId? widget, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Widget = widget;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Widget { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetWidgetResultInfo(Widget, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidget_Widget_WidgetFromWidgetEntityMapper : global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, GetWidget_Widget_Widget>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetWidget_Widget_WidgetFromWidgetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetWidget_Widget_Widget Map(global::industry9.Client.Data.State.WidgetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetWidget_Widget_Widget(entity.Id, entity.Name, entity.Created, entity.Type, MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(entity.Labels, snapshot), MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(entity.ColumnMappings, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>? MapIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels?>();
            foreach (global::industry9.Client.Data.State.LabelDataData? child in list)
            {
                labelDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_Labels(child, snapshot));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_Labels? MapIGetDashboard_Dashboard_Widgets_Widget_Labels(global::industry9.Client.Data.State.LabelDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_Labels_LabelData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var columnMappingDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings?>();
            foreach (global::industry9.Client.Data.State.ColumnMappingDataData? child in list)
            {
                columnMappingDatas.Add(MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child, snapshot));
            }

            return columnMappingDatas;
        }

        private global::industry9.Client.Data.IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings? MapIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::industry9.Client.Data.State.ColumnMappingDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDashboard_Dashboard_Widgets_Widget_ColumnMappings returnValue = default !;
            if (data?.__typename.Equals("ColumnMappingData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDashboard_Dashboard_Widgets_Widget_ColumnMappings_ColumnMappingData(data.Name, data.Format, data.DataSourceId, data.SourceColumn);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.UpsertWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpsertWidgetResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IUpsertWidgetResult);
        public UpsertWidgetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpsertWidgetResultInfo info)
            {
                return new UpsertWidgetResult(info.UpsertWidget);
            }

            throw new global::System.ArgumentException("UpsertWidgetResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpsertWidgetResultInfo(global::System.String? upsertWidget, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpsertWidget = upsertWidget;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? UpsertWidget { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpsertWidgetResultInfo(UpsertWidget, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.DeleteWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteWidgetResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IDeleteWidgetResult);
        public DeleteWidgetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteWidgetResultInfo info)
            {
                return new DeleteWidgetResult(info.DeleteWidget);
            }

            throw new global::System.ArgumentException("DeleteWidgetResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteWidgetResultInfo(global::System.Boolean deleteWidget, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteWidget = deleteWidget;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteWidget { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteWidgetResultInfo(DeleteWidget, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.AddWidgetToDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddWidgetToDashboardResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IAddWidgetToDashboardResult);
        public AddWidgetToDashboardResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddWidgetToDashboardResultInfo info)
            {
                return new AddWidgetToDashboardResult(info.AddWidgetToDashboard);
            }

            throw new global::System.ArgumentException("AddWidgetToDashboardResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddWidgetToDashboardResultInfo(global::System.Boolean addWidgetToDashboard, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddWidgetToDashboard = addWidgetToDashboard;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean AddWidgetToDashboard { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddWidgetToDashboardResultInfo(AddWidgetToDashboard, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.RemoveWidgetFromDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RemoveWidgetFromDashboardResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::industry9.Client.Data.IRemoveWidgetFromDashboardResult);
        public RemoveWidgetFromDashboardResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RemoveWidgetFromDashboardResultInfo info)
            {
                return new RemoveWidgetFromDashboardResult(info.RemoveWidgetFromDashboard);
            }

            throw new global::System.ArgumentException("RemoveWidgetFromDashboardResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RemoveWidgetFromDashboardResultInfo(global::System.Boolean removeWidgetFromDashboard, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RemoveWidgetFromDashboard = removeWidgetFromDashboard;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean RemoveWidgetFromDashboard { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RemoveWidgetFromDashboardResultInfo(RemoveWidgetFromDashboard, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IDashboardInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsPrivateSet { get; }

        global::System.Boolean IsColumnCountSet { get; }

        global::System.Boolean IsLabelsSet { get; }

        global::System.Boolean IsWidgetsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ILabelDataInputInfo
    {
        global::System.Boolean IsNameSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IDashboardWidgetInputInfo
    {
        global::System.Boolean IsDashboardIdSet { get; }

        global::System.Boolean IsWidgetIdSet { get; }

        global::System.Boolean IsSizeSet { get; }

        global::System.Boolean IsPositionSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface ISizeInputInfo
    {
        global::System.Boolean IsWidthSet { get; }

        global::System.Boolean IsHeightSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IPositionInputInfo
    {
        global::System.Boolean IsXSet { get; }

        global::System.Boolean IsYSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IDataSourceDefinitionInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsTypeSet { get; }

        global::System.Boolean IsInputsSet { get; }

        global::System.Boolean IsColumnsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IExportedColumnDataInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsValueTypeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IRandomDataSourcePropertiesInputInfo
    {
        global::System.Boolean IsMinSet { get; }

        global::System.Boolean IsMaxSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IDataQueryDataSourcePropertiesInputInfo
    {
        global::System.Boolean IsQuerySet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IWidgetInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsTypeSet { get; }

        global::System.Boolean IsLabelsSet { get; }

        global::System.Boolean IsColumnMappingsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    internal interface IColumnMappingDataInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsFormatSet { get; }

        global::System.Boolean IsDataSourceIdSet { get; }

        global::System.Boolean IsSourceColumnSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetDashboardsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDashboardsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDashboardsResult Result, GetDashboardsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDashboardsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDashboardsResult, GetDashboardsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? dashboardsId = default !;
            _entityStore.Update(session =>
            {
                dashboardsId = UpdateIGetDashboards_DashboardsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dashboards"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDashboardsResultInfo(dashboardsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDashboards_DashboardsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dashboards = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dashboards.Add(UpdateIGetDashboards_DashboardsEntity(session, child, entityIds));
            }

            return dashboards;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDashboards_DashboardsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dashboard", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.DashboardEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DashboardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "private")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeIGetDashboards_Dashboards_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), entity.ColumnCount, entity.Widgets));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DashboardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "private")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeIGetDashboards_Dashboards_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? DeserializeIGetDashboards_Dashboards_LabelsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.LabelDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                labelDatas.Add(DeserializeIGetDashboards_Dashboards_Labels(child));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.State.LabelDataData? DeserializeIGetDashboards_Dashboards_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.LabelDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDashboardBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType> _widgetTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetDashboardBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _widgetTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType>("WidgetType") ?? throw new global::System.ArgumentException("No serializer for type `WidgetType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDashboardResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDashboardResult Result, GetDashboardResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDashboardResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDashboardResult, GetDashboardResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? dashboardId = default !;
            _entityStore.Update(session =>
            {
                dashboardId = UpdateIGetDashboard_DashboardEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dashboard"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDashboardResultInfo(dashboardId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetDashboard_DashboardEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dashboard", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.DashboardEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DashboardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "private")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeIGetDashboard_Dashboard_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnCount")), DeserializeIGetDashboard_Dashboard_WidgetsArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widgets"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DashboardEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "private")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeIGetDashboard_Dashboard_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnCount")), DeserializeIGetDashboard_Dashboard_WidgetsArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widgets"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? DeserializeIGetDashboard_Dashboard_LabelsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.LabelDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                labelDatas.Add(DeserializeIGetDashboard_Dashboard_Labels(child));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.State.LabelDataData? DeserializeIGetDashboard_Dashboard_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.LabelDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.DashboardWidgetDataData?>? DeserializeIGetDashboard_Dashboard_WidgetsArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dashboardWidgetDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.DashboardWidgetDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dashboardWidgetDatas.Add(DeserializeIGetDashboard_Dashboard_Widgets(session, child, entityIds));
            }

            return dashboardWidgetDatas;
        }

        private global::industry9.Client.Data.State.DashboardWidgetDataData? DeserializeIGetDashboard_Dashboard_Widgets(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DashboardWidgetData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.DashboardWidgetDataData(typename, widgetId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widgetId")), widget: UpdateIGetDashboard_Dashboard_Widgets_WidgetEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widget"), entityIds), size: DeserializeNonNullableIGetDashboard_Dashboard_Widgets_Size(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "size")), position: DeserializeNonNullableIGetDashboard_Dashboard_Widgets_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetDashboard_Dashboard_Widgets_WidgetEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.WidgetEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnMappings"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnMappings"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::industry9.Client.Data.WidgetType DeserializeNonNullableWidgetType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _widgetTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.LabelDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                labelDatas.Add(DeserializeIGetDashboard_Dashboard_Widgets_Widget_Labels(child));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.State.LabelDataData? DeserializeIGetDashboard_Dashboard_Widgets_Widget_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.LabelDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var columnMappingDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.ColumnMappingDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                columnMappingDatas.Add(DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child));
            }

            return columnMappingDatas;
        }

        private global::industry9.Client.Data.State.ColumnMappingDataData? DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ColumnMappingData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.ColumnMappingDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), format: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "format")), dataSourceId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataSourceId")), sourceColumn: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceColumn")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::industry9.Client.Data.State.SizeData DeserializeNonNullableIGetDashboard_Dashboard_Widgets_Size(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Size", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.SizeData(typename, width: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "width")), height: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "height")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::industry9.Client.Data.State.PositionData DeserializeNonNullableIGetDashboard_Dashboard_Widgets_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.PositionData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDashboardBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDashboardResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UpsertDashboardBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDashboardResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpsertDashboardResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpsertDashboardResult Result, UpsertDashboardResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUpsertDashboardResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpsertDashboardResult, UpsertDashboardResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpsertDashboardResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "upsertDashboard")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDashboardBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDashboardResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteDashboardBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDashboardResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteDashboardResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteDashboardResult Result, DeleteDashboardResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDeleteDashboardResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteDashboardResult, DeleteDashboardResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteDashboardResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteDashboard")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType> _dataSourceTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType> _columnValueTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetDataSourceDefinitionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dataSourceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType>("DataSourceType") ?? throw new global::System.ArgumentException("No serializer for type `DataSourceType` found.");
            _columnValueTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType>("ColumnValueType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnValueType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDataSourceDefinitionsResult Result, GetDataSourceDefinitionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDataSourceDefinitionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDataSourceDefinitionsResult, GetDataSourceDefinitionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? dataSourceDefinitionsId = default !;
            _entityStore.Update(session =>
            {
                dataSourceDefinitionsId = UpdateIGetDataSourceDefinitions_DataSourceDefinitionsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataSourceDefinitions"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDataSourceDefinitionsResultInfo(dataSourceDefinitionsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDataSourceDefinitions_DataSourceDefinitionsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dataSourceDefinitions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dataSourceDefinitions.Add(UpdateIGetDataSourceDefinitions_DataSourceDefinitionsEntity(session, child, entityIds));
            }

            return dataSourceDefinitions;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDataSourceDefinitions_DataSourceDefinitionsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DataSourceDefinition", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.DataSourceDefinitionEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DataSourceDefinitionEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableDataSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDataSourceDefinitions_DataSourceDefinitions_ColumnsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columns")), entity.Inputs));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DataSourceDefinitionEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableDataSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDataSourceDefinitions_DataSourceDefinitions_ColumnsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columns")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::industry9.Client.Data.DataSourceType DeserializeNonNullableDataSourceType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dataSourceTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? DeserializeIGetDataSourceDefinitions_DataSourceDefinitions_ColumnsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var exportedColumnDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.ExportedColumnDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                exportedColumnDatas.Add(DeserializeIGetDataSourceDefinitions_DataSourceDefinitions_Columns(child));
            }

            return exportedColumnDatas;
        }

        private global::industry9.Client.Data.State.ExportedColumnDataData? DeserializeIGetDataSourceDefinitions_DataSourceDefinitions_Columns(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ExportedColumnData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.ExportedColumnDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), valueType: DeserializeNonNullableColumnValueType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueType")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::industry9.Client.Data.ColumnValueType DeserializeNonNullableColumnValueType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _columnValueTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetDataSourceDefinitionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType> _dataSourceTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType> _columnValueTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetDataSourceDefinitionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dataSourceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType>("DataSourceType") ?? throw new global::System.ArgumentException("No serializer for type `DataSourceType` found.");
            _columnValueTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType>("ColumnValueType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnValueType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDataSourceDefinitionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDataSourceDefinitionResult Result, GetDataSourceDefinitionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDataSourceDefinitionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDataSourceDefinitionResult, GetDataSourceDefinitionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? dataSourceDefinitionId = default !;
            _entityStore.Update(session =>
            {
                dataSourceDefinitionId = UpdateIGetDataSourceDefinition_DataSourceDefinitionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataSourceDefinition"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDataSourceDefinitionResultInfo(dataSourceDefinitionId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetDataSourceDefinition_DataSourceDefinitionEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DataSourceDefinition", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.DataSourceDefinitionEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DataSourceDefinitionEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableDataSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDataSourceDefinition_DataSourceDefinition_ColumnsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columns")), DeserializeStringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputs"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.DataSourceDefinitionEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableDataSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDataSourceDefinition_DataSourceDefinition_ColumnsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columns")), DeserializeStringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputs"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::industry9.Client.Data.DataSourceType DeserializeNonNullableDataSourceType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dataSourceTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? DeserializeStringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeString(child));
            }

            return @strings;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ExportedColumnDataData?>? DeserializeIGetDataSourceDefinition_DataSourceDefinition_ColumnsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var exportedColumnDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.ExportedColumnDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                exportedColumnDatas.Add(DeserializeIGetDataSourceDefinition_DataSourceDefinition_Columns(child));
            }

            return exportedColumnDatas;
        }

        private global::industry9.Client.Data.State.ExportedColumnDataData? DeserializeIGetDataSourceDefinition_DataSourceDefinition_Columns(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ExportedColumnData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.ExportedColumnDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), valueType: DeserializeNonNullableColumnValueType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueType")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::industry9.Client.Data.ColumnValueType DeserializeNonNullableColumnValueType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _columnValueTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchRandomDataSourcePropertiesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public FetchRandomDataSourcePropertiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchRandomDataSourcePropertiesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchRandomDataSourcePropertiesResult Result, FetchRandomDataSourcePropertiesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IFetchRandomDataSourcePropertiesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchRandomDataSourcePropertiesResult, FetchRandomDataSourcePropertiesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchRandomDataSourcePropertiesResultInfo(DeserializeIFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fetchRandomPropertiesFromDataSource")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::industry9.Client.Data.State.RandomDataSourcePropertiesData? DeserializeIFetchRandomDataSourceProperties_FetchRandomPropertiesFromDataSource(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RandomDataSourceProperties", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.RandomDataSourcePropertiesData(typename, min: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "min")), max: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "max")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class FetchQueryDataSourcePropertiesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchQueryDataSourcePropertiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchQueryDataSourcePropertiesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchQueryDataSourcePropertiesResult Result, FetchQueryDataSourcePropertiesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IFetchQueryDataSourcePropertiesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchQueryDataSourcePropertiesResult, FetchQueryDataSourcePropertiesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchQueryDataSourcePropertiesResultInfo(DeserializeIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fetchDataQueryPropertiesFromDataSource")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::industry9.Client.Data.State.DataQueryDataSourcePropertiesData? DeserializeIFetchQueryDataSourceProperties_FetchDataQueryPropertiesFromDataSource(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DataQueryDataSourceProperties", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.DataQueryDataSourcePropertiesData(typename, query: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "query")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDataSourceDefinitionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType> _dataSourceTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType> _columnValueTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpsertDataSourceDefinitionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDataSourceDefinitionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dataSourceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.DataSourceType>("DataSourceType") ?? throw new global::System.ArgumentException("No serializer for type `DataSourceType` found.");
            _columnValueTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.ColumnValueType>("ColumnValueType") ?? throw new global::System.ArgumentException("No serializer for type `ColumnValueType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpsertDataSourceDefinitionResult Result, UpsertDataSourceDefinitionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUpsertDataSourceDefinitionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpsertDataSourceDefinitionResult, UpsertDataSourceDefinitionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpsertDataSourceDefinitionResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "upsertDataSourceDefinition")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteDataSourceDefinitionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDataSourceDefinitionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteDataSourceDefinitionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDataSourceDefinitionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteDataSourceDefinitionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteDataSourceDefinitionResult Result, DeleteDataSourceDefinitionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDeleteDataSourceDefinitionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteDataSourceDefinitionResult, DeleteDataSourceDefinitionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteDataSourceDefinitionResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteDataSourceDefinition")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignRandomDataSourcePropertiesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AssignRandomDataSourcePropertiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAssignRandomDataSourcePropertiesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAssignRandomDataSourcePropertiesResult Result, AssignRandomDataSourcePropertiesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAssignRandomDataSourcePropertiesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAssignRandomDataSourcePropertiesResult, AssignRandomDataSourcePropertiesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AssignRandomDataSourcePropertiesResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assignRandomPropertiesToDataSource")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AssignQueryDataSourcePropertiesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AssignQueryDataSourcePropertiesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAssignQueryDataSourcePropertiesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAssignQueryDataSourcePropertiesResult Result, AssignQueryDataSourcePropertiesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAssignQueryDataSourcePropertiesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAssignQueryDataSourcePropertiesResult, AssignQueryDataSourcePropertiesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AssignQueryDataSourcePropertiesResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assignDataQueryPropertiesToDataSource")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class OnDataReceivedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IOnDataReceivedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IOnDataReceivedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public OnDataReceivedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IOnDataReceivedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnDataReceivedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnDataReceivedResult Result, OnDataReceivedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IOnDataReceivedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnDataReceivedResult, OnDataReceivedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnDataReceivedResultInfo(DeserializeIOnDataReceived_OnDataReceived(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "onDataReceived")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::industry9.Client.Data.State.SensorDataData? DeserializeIOnDataReceived_OnDataReceived(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SensorData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.SensorDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), @value: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")), dataSourceId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataSourceId")), timestamp: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "timestamp")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType> _widgetTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetWidgetsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _widgetTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType>("WidgetType") ?? throw new global::System.ArgumentException("No serializer for type `WidgetType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetWidgetsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetWidgetsResult Result, GetWidgetsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetWidgetsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetWidgetsResult, GetWidgetsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? widgetsId = default !;
            _entityStore.Update(session =>
            {
                widgetsId = UpdateIGetWidgets_WidgetsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widgets"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetWidgetsResultInfo(widgetsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetWidgets_WidgetsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var widgets = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                widgets.Add(UpdateIGetWidgets_WidgetsEntity(session, child, entityIds));
            }

            return widgets;
        }

        private global::StrawberryShake.EntityId? UpdateIGetWidgets_WidgetsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.WidgetEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetWidgets_Widgets_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), entity.ColumnMappings));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetWidgets_Widgets_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::industry9.Client.Data.WidgetType DeserializeNonNullableWidgetType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _widgetTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? DeserializeIGetWidgets_Widgets_LabelsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.LabelDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                labelDatas.Add(DeserializeIGetWidgets_Widgets_Labels(child));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.State.LabelDataData? DeserializeIGetWidgets_Widgets_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.LabelDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class GetWidgetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType> _widgetTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetWidgetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _widgetTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType>("WidgetType") ?? throw new global::System.ArgumentException("No serializer for type `WidgetType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetWidgetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetWidgetResult Result, GetWidgetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetWidgetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetWidgetResult, GetWidgetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? widgetId = default !;
            _entityStore.Update(session =>
            {
                widgetId = UpdateIGetWidget_WidgetEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "widget"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetWidgetResultInfo(widgetId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetWidget_WidgetEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Widget", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::industry9.Client.Data.State.WidgetEntity? entity))
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnMappings"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::industry9.Client.Data.State.WidgetEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created")), DeserializeNonNullableWidgetType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "columnMappings"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::industry9.Client.Data.WidgetType DeserializeNonNullableWidgetType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _widgetTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.LabelDataData?>? DeserializeIGetDashboard_Dashboard_Widgets_Widget_LabelsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var labelDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.LabelDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                labelDatas.Add(DeserializeIGetDashboard_Dashboard_Widgets_Widget_Labels(child));
            }

            return labelDatas;
        }

        private global::industry9.Client.Data.State.LabelDataData? DeserializeIGetDashboard_Dashboard_Widgets_Widget_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.LabelDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::industry9.Client.Data.State.ColumnMappingDataData?>? DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappingsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var columnMappingDatas = new global::System.Collections.Generic.List<global::industry9.Client.Data.State.ColumnMappingDataData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                columnMappingDatas.Add(DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(child));
            }

            return columnMappingDatas;
        }

        private global::industry9.Client.Data.State.ColumnMappingDataData? DeserializeIGetDashboard_Dashboard_Widgets_Widget_ColumnMappings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ColumnMappingData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::industry9.Client.Data.State.ColumnMappingDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), format: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "format")), dataSourceId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataSourceId")), sourceColumn: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceColumn")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertWidgetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertWidgetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType> _widgetTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpsertWidgetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertWidgetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _widgetTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::industry9.Client.Data.WidgetType>("WidgetType") ?? throw new global::System.ArgumentException("No serializer for type `WidgetType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpsertWidgetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpsertWidgetResult Result, UpsertWidgetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUpsertWidgetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpsertWidgetResult, UpsertWidgetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpsertWidgetResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "upsertWidget")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DeleteWidgetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteWidgetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteWidgetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteWidgetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteWidgetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteWidgetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteWidgetResult Result, DeleteWidgetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDeleteWidgetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteWidgetResult, DeleteWidgetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteWidgetResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteWidget")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class AddWidgetToDashboardBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAddWidgetToDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAddWidgetToDashboardResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public AddWidgetToDashboardBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAddWidgetToDashboardResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddWidgetToDashboardResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddWidgetToDashboardResult Result, AddWidgetToDashboardResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IAddWidgetToDashboardResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddWidgetToDashboardResult, AddWidgetToDashboardResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddWidgetToDashboardResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addWidgetToDashboard")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RemoveWidgetFromDashboardBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IRemoveWidgetFromDashboardResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public RemoveWidgetFromDashboardBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IRemoveWidgetFromDashboardResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IRemoveWidgetFromDashboardResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRemoveWidgetFromDashboardResult Result, RemoveWidgetFromDashboardResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRemoveWidgetFromDashboardResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRemoveWidgetFromDashboardResult, RemoveWidgetFromDashboardResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RemoveWidgetFromDashboardResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "removeWidgetFromDashboard")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class LabelDataData
    {
        public LabelDataData(global::System.String __typename, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DashboardWidgetDataData
    {
        public DashboardWidgetDataData(global::System.String __typename, global::System.String? widgetId = default !, global::StrawberryShake.EntityId? widget = default !, global::industry9.Client.Data.State.SizeData? size = default !, global::industry9.Client.Data.State.PositionData? position = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            WidgetId = widgetId;
            Widget = widget;
            Size = size;
            Position = position;
        }

        public global::System.String __typename { get; }

        public global::System.String? WidgetId { get; }

        public global::StrawberryShake.EntityId? Widget { get; }

        public global::industry9.Client.Data.State.SizeData? Size { get; }

        public global::industry9.Client.Data.State.PositionData? Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SizeData
    {
        public SizeData(global::System.String __typename, global::System.Int32? width = default !, global::System.Int32? height = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Width = width;
            Height = height;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Width { get; }

        public global::System.Int32? Height { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class PositionData
    {
        public PositionData(global::System.String __typename, global::System.Int32? x = default !, global::System.Int32? y = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            X = x;
            Y = y;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? X { get; }

        public global::System.Int32? Y { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ColumnMappingDataData
    {
        public ColumnMappingDataData(global::System.String __typename, global::System.String? name = default !, global::System.String? format = default !, global::System.String? dataSourceId = default !, global::System.String? sourceColumn = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Format = format;
            DataSourceId = dataSourceId;
            SourceColumn = sourceColumn;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? Format { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.String? SourceColumn { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class ExportedColumnDataData
    {
        public ExportedColumnDataData(global::System.String __typename, global::System.String? name = default !, global::industry9.Client.Data.ColumnValueType? valueType = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            ValueType = valueType;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::industry9.Client.Data.ColumnValueType? ValueType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class RandomDataSourcePropertiesData
    {
        public RandomDataSourcePropertiesData(global::System.String __typename, global::System.Int32? min = default !, global::System.Int32? max = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Min = min;
            Max = max;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Min { get; }

        public global::System.Int32? Max { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class DataQueryDataSourcePropertiesData
    {
        public DataQueryDataSourcePropertiesData(global::System.String __typename, global::System.String? query = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Query = query;
        }

        public global::System.String __typename { get; }

        public global::System.String? Query { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class SensorDataData
    {
        public SensorDataData(global::System.String __typename, global::System.String? name = default !, global::System.Double? @value = default !, global::System.String? dataSourceId = default !, global::System.DateTimeOffset? timestamp = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Value = @value;
            DataSourceId = dataSourceId;
            Timestamp = timestamp;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Double? Value { get; }

        public global::System.String? DataSourceId { get; }

        public global::System.DateTimeOffset? Timestamp { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class industry9ClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Dashboard" => ParseDashboardEntityId(obj, __typename), "Widget" => ParseWidgetEntityId(obj, __typename), "DataSourceDefinition" => ParseDataSourceDefinitionEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Dashboard" => FormatDashboardEntityId(entityId), "Widget" => FormatWidgetEntityId(entityId), "DataSourceDefinition" => FormatDataSourceDefinitionEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseDashboardEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDashboardEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseWidgetEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatWidgetEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDataSourceDefinitionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDataSourceDefinitionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class industry9ClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public industry9ClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public static partial class industry9ClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::industry9.Client.Data.State.industry9ClientStoreAccessor> Addindustry9Client(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::industry9.Client.Data.State.industry9ClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDashboardsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDashboardQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertDashboardMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteDashboardMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDataSourceDefinitionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDataSourceDefinitionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.FetchRandomDataSourcePropertiesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.FetchQueryDataSourcePropertiesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertDataSourceDefinitionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteDataSourceDefinitionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AssignRandomDataSourcePropertiesMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AssignQueryDataSourcePropertiesMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.OnDataReceivedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetWidgetsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetWidgetQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertWidgetMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteWidgetMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AddWidgetToDashboardMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.RemoveWidgetFromDashboardMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.industry9Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.Iindustry9Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::industry9.Client.Data.State.industry9ClientStoreAccessor>("industry9Client", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("industry9Client", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("industry9Client"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, global::industry9.Client.Data.GetDashboards_Dashboards_Dashboard>, global::industry9.Client.Data.State.GetDashboards_Dashboards_DashboardFromDashboardEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DashboardEntity, global::industry9.Client.Data.GetDashboard_Dashboard_Dashboard>, global::industry9.Client.Data.State.GetDashboard_Dashboard_DashboardFromDashboardEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, global::industry9.Client.Data.GetDashboard_Dashboard_Widgets_Widget_Widget>, global::industry9.Client.Data.State.GetDashboard_Dashboard_Widgets_Widget_WidgetFromWidgetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, global::industry9.Client.Data.GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinition>, global::industry9.Client.Data.State.GetDataSourceDefinitions_DataSourceDefinitions_DataSourceDefinitionFromDataSourceDefinitionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.DataSourceDefinitionEntity, global::industry9.Client.Data.GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinition>, global::industry9.Client.Data.State.GetDataSourceDefinition_DataSourceDefinition_DataSourceDefinitionFromDataSourceDefinitionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, global::industry9.Client.Data.GetWidgets_Widgets_Widget>, global::industry9.Client.Data.State.GetWidgets_Widgets_WidgetFromWidgetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::industry9.Client.Data.State.WidgetEntity, global::industry9.Client.Data.GetWidget_Widget_Widget>, global::industry9.Client.Data.State.GetWidget_Widget_WidgetFromWidgetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.WidgetTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.DataSourceTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.ColumnValueTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.DashboardInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.LabelDataInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.DashboardWidgetInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.SizeInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.PositionInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.DataSourceDefinitionInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.ExportedColumnDataInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.RandomDataSourcePropertiesInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.DataQueryDataSourcePropertiesInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.WidgetInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::industry9.Client.Data.ColumnMappingDataInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardsResult>, global::industry9.Client.Data.State.GetDashboardsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetDashboardsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardsResult>, global::industry9.Client.Data.State.GetDashboardsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetDashboardsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetDashboardsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetDashboardsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDashboardsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardResult>, global::industry9.Client.Data.State.GetDashboardResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDashboardResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetDashboardQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardResult>, global::industry9.Client.Data.State.GetDashboardBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetDashboardResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDashboardResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetDashboardQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetDashboardQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDashboardQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDashboardResult>, global::industry9.Client.Data.State.UpsertDashboardResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDashboardResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IUpsertDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDashboardResult>, global::industry9.Client.Data.State.UpsertDashboardBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IUpsertDashboardResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDashboardResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDashboardResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.UpsertDashboardMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IUpsertDashboardMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDashboardResult>, global::industry9.Client.Data.State.DeleteDashboardResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDashboardResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IDeleteDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDashboardResult>, global::industry9.Client.Data.State.DeleteDashboardBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IDeleteDashboardResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDashboardResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDashboardResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.DeleteDashboardMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IDeleteDashboardMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionsResult>, global::industry9.Client.Data.State.GetDataSourceDefinitionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetDataSourceDefinitionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionsResult>, global::industry9.Client.Data.State.GetDataSourceDefinitionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetDataSourceDefinitionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetDataSourceDefinitionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetDataSourceDefinitionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDataSourceDefinitionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionResult>, global::industry9.Client.Data.State.GetDataSourceDefinitionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetDataSourceDefinitionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetDataSourceDefinitionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionResult>, global::industry9.Client.Data.State.GetDataSourceDefinitionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetDataSourceDefinitionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetDataSourceDefinitionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetDataSourceDefinitionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetDataSourceDefinitionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetDataSourceDefinitionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>, global::industry9.Client.Data.State.FetchRandomDataSourcePropertiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>, global::industry9.Client.Data.State.FetchRandomDataSourcePropertiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchRandomDataSourcePropertiesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.FetchRandomDataSourcePropertiesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IFetchRandomDataSourcePropertiesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.FetchRandomDataSourcePropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>, global::industry9.Client.Data.State.FetchQueryDataSourcePropertiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>, global::industry9.Client.Data.State.FetchQueryDataSourcePropertiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IFetchQueryDataSourcePropertiesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.FetchQueryDataSourcePropertiesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IFetchQueryDataSourcePropertiesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.FetchQueryDataSourcePropertiesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>, global::industry9.Client.Data.State.UpsertDataSourceDefinitionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>, global::industry9.Client.Data.State.UpsertDataSourceDefinitionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertDataSourceDefinitionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.UpsertDataSourceDefinitionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IUpsertDataSourceDefinitionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertDataSourceDefinitionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>, global::industry9.Client.Data.State.DeleteDataSourceDefinitionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>, global::industry9.Client.Data.State.DeleteDataSourceDefinitionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteDataSourceDefinitionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.DeleteDataSourceDefinitionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IDeleteDataSourceDefinitionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteDataSourceDefinitionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>, global::industry9.Client.Data.State.AssignRandomDataSourcePropertiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>, global::industry9.Client.Data.State.AssignRandomDataSourcePropertiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignRandomDataSourcePropertiesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.AssignRandomDataSourcePropertiesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IAssignRandomDataSourcePropertiesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AssignRandomDataSourcePropertiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>, global::industry9.Client.Data.State.AssignQueryDataSourcePropertiesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>, global::industry9.Client.Data.State.AssignQueryDataSourcePropertiesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAssignQueryDataSourcePropertiesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.AssignQueryDataSourcePropertiesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IAssignQueryDataSourcePropertiesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AssignQueryDataSourcePropertiesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IOnDataReceivedResult>, global::industry9.Client.Data.State.OnDataReceivedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IOnDataReceivedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IOnDataReceivedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IOnDataReceivedResult>, global::industry9.Client.Data.State.OnDataReceivedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IOnDataReceivedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IOnDataReceivedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IOnDataReceivedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.OnDataReceivedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IOnDataReceivedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.OnDataReceivedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetsResult>, global::industry9.Client.Data.State.GetWidgetsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetWidgetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetsResult>, global::industry9.Client.Data.State.GetWidgetsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetWidgetsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetWidgetsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetWidgetsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetWidgetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetResult>, global::industry9.Client.Data.State.GetWidgetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IGetWidgetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IGetWidgetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetResult>, global::industry9.Client.Data.State.GetWidgetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IGetWidgetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IGetWidgetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.GetWidgetQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IGetWidgetQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.GetWidgetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertWidgetResult>, global::industry9.Client.Data.State.UpsertWidgetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IUpsertWidgetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IUpsertWidgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertWidgetResult>, global::industry9.Client.Data.State.UpsertWidgetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IUpsertWidgetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertWidgetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IUpsertWidgetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.UpsertWidgetMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IUpsertWidgetMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.UpsertWidgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteWidgetResult>, global::industry9.Client.Data.State.DeleteWidgetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IDeleteWidgetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IDeleteWidgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteWidgetResult>, global::industry9.Client.Data.State.DeleteWidgetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IDeleteWidgetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteWidgetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IDeleteWidgetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.DeleteWidgetMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IDeleteWidgetMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.DeleteWidgetMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAddWidgetToDashboardResult>, global::industry9.Client.Data.State.AddWidgetToDashboardResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IAddWidgetToDashboardResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IAddWidgetToDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAddWidgetToDashboardResult>, global::industry9.Client.Data.State.AddWidgetToDashboardBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IAddWidgetToDashboardResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAddWidgetToDashboardResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IAddWidgetToDashboardResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.AddWidgetToDashboardMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IAddWidgetToDashboardMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.AddWidgetToDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>, global::industry9.Client.Data.State.RemoveWidgetFromDashboardResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>, global::industry9.Client.Data.State.RemoveWidgetFromDashboardBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::industry9.Client.Data.IRemoveWidgetFromDashboardResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.RemoveWidgetFromDashboardMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.IRemoveWidgetFromDashboardMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.RemoveWidgetFromDashboardMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::industry9.Client.Data.State.industry9ClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.industry9Client>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::industry9.Client.Data.Iindustry9Client>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::industry9.Client.Data.industry9Client>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
