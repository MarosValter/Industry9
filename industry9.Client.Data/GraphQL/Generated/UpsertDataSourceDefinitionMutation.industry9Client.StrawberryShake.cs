// <auto-generated/>
#nullable enable

namespace industry9.Client.Data.GraphQL.Generated
{
    /// <summary>
    /// Represents the operation service of the UpsertDataSourceDefinition GraphQL operation
    /// <code>
    /// mutation UpsertDataSourceDefinition($definition: DataSourceDefinitionInput!) {
    ///   upsertDataSourceDefinition(dataSourceDefinition: $definition)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.2.2.0")]
    public partial class UpsertDataSourceDefinitionMutation : global::industry9.Client.Data.GraphQL.Generated.IUpsertDataSourceDefinitionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpsertDataSourceDefinitionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dataSourceDefinitionInputFormatter;
        public UpsertDataSourceDefinitionMutation(global::StrawberryShake.IOperationExecutor<IUpsertDataSourceDefinitionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dataSourceDefinitionInputFormatter = serializerResolver.GetInputValueFormatter("DataSourceDefinitionInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpsertDataSourceDefinitionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> ExecuteAsync(global::industry9.Client.Data.GraphQL.Generated.DataSourceDefinitionInput definition, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(definition);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpsertDataSourceDefinitionResult>> Watch(global::industry9.Client.Data.GraphQL.Generated.DataSourceDefinitionInput definition, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(definition);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::industry9.Client.Data.GraphQL.Generated.DataSourceDefinitionInput definition)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("definition", FormatDefinition(definition));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpsertDataSourceDefinitionMutationDocument.Instance.Hash.Value, name: "UpsertDataSourceDefinition", document: UpsertDataSourceDefinitionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDefinition(global::industry9.Client.Data.GraphQL.Generated.DataSourceDefinitionInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _dataSourceDefinitionInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}
