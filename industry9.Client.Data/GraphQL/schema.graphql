schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  node(id: ID!): Node
  dashboards: [Dashboard!]!
  dashboard(id: ID!): Dashboard!
  widgets: [Widget!]!
  widget(id: ID!): Widget!
  dataSourceDefinitions: [DataSourceDefinition!]!
  dataSourceDefinition(id: ID!): DataSourceDefinition!
  fetchRandomPropertiesFromDataSource(dataSourceId: ID!): RandomDataSourceProperties
  fetchDataQueryPropertiesFromDataSource(dataSourceId: ID!): DataQueryDataSourceProperties
}

type Mutation {
  upsertDashboard(dashboard: DashboardInput!): String!
  deleteDashboard(id: ID!): Boolean!
  addWidgetToDashboard(widget: DashboardWidgetInput!): Boolean!
  removeWidgetFromDashboard(dashboardId: ID! widgetId: ID!): Boolean!
  upsertWidget(widget: WidgetInput!): String!
  deleteWidget(id: ID!): Boolean!
  upsertDataSourceDefinition(dataSourceDefinition: DataSourceDefinitionInput!): String!
  deleteDataSourceDefinition(id: ID!): Boolean!
  assignRandomPropertiesToDataSource(dataSourceId: ID! properties: RandomDataSourcePropertiesInput!): Boolean!
  assignDataQueryPropertiesToDataSource(dataSourceId: ID! properties: DataQueryDataSourcePropertiesInput!): Boolean!
}

type Subscription {
  onDataReceived(dataSourceId: ID!): SensorData!
}

input LabelDataInput {
  name: String
}

input ExportedColumnDataInput {
  name: String
  valueType: ColumnValueType!
}

enum RelativeTimeMode {
  LIVE
  TODAY
  YESTERDAY
  LAST_N_SECONDS
  LAST_N_MINUTES
  LAST_N_HOURS
  LAST_YEAR
}

input DataQueryDataSourcePropertiesInput {
  query: String
}

input RandomDataSourcePropertiesInput {
  min: Int!
  max: Int!
}

scalar Color

scalar Position

scalar Size

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Dashboard implements Node {
  id: ID!
  created: DateTime!
  name: String
  private: Boolean!
  columnCount: Int!
  authorId: String
  labels: [LabelData]
  widgets: [DashboardWidget]
}

type Widget implements Node {
  id: ID!
  created: DateTime!
  name: String
  type: WidgetType!
  labels: [LabelData]
  columnMappings: [ColumnMapping]
}

type DashboardWidget {
  size: Size!
  position: Position!
  widget: Widget
}

type DataSourceDefinition implements Node {
  id: ID!
  created: DateTime!
  name: String
  type: DataSourceType!
  inputs: [String]
  columns: [ExportedColumnData]
}

type ColumnMapping {
  dataSourceId: ID!
  name: String
  format: String
  sourceColumn: String
}

input DashboardInput {
  id: ID
  name: String!
  private: Boolean!
  columnCount: Int!
  labels: [LabelDataInput] = [  ]
  widgets: [DashboardWidgetInput] = [  ]
}

input DashboardWidgetInput {
  dashboardId: ID!
  widgetId: ID!
  size: Size!
  position: Position!
}

input WidgetInput {
  id: ID
  name: String!
  type: WidgetType!
  labels: [LabelDataInput] = [  ]
  columnMappings: [ColumnMappingInput] = [  ]
}

input DataSourceDefinitionInput {
  id: ID
  name: String!
  type: DataSourceType!
  inputs: [String] = [  ]
  columns: [ExportedColumnDataInput] = [  ]
}

input ColumnMappingInput {
  dataSourceId: ID!
  name: String
  format: String
  sourceColumn: String
}

enum WidgetType {
  LINE_CHART
  BAR_CHART
  PIE_CHART
  TABLE
}

enum DataSourceType {
  RANDOM
  DATA_QUERY
}

type SensorData {
  name: String
  value: Float!
  dataSourceId: String
  timestamp: DateTime!
}

type LabelData {
  name: String
}

enum ColumnValueType {
  STRING
  NUMBER
  DATE_TIME
  BOOLEAN
}

type ExportedColumnData {
  name: String
  valueType: ColumnValueType!
}

type RandomDataSourceProperties {
  min: Int!
  max: Int!
}

type DataQueryDataSourceProperties {
  query: String
}