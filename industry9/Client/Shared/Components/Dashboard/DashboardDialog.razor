@using industry9.Common.Enums
@using industry9.Client.Data.Dto.Dashboard
@using industry9.Client.Data.Store.Features.Dashboard.Actions
@inject IDispatcher Dispatcher

<MatDialog @bind-IsOpen="@IsOpen">
    <MatDialogTitle>@Title</MatDialogTitle>
    <MatDialogContent>
        @if (Operation == CRUDOperation.Create || Operation == CRUDOperation.Update)
        {
            <EditForm Model="@EditedObject" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @*<MatTabGroup>
                    <MatTab Label="General">*@
                        <fieldset>
                            <div class="form-group">
                                <MatTextField Label="Name" @bind-Value="@EditedObject.Name" Outlined="true"></MatTextField>
                            </div>
                            <div class="form-group">
                                <MatNumericUpDownField Label="Columns" Outlined="true" DecimalPlaces="0" Minimum="2" Maximum="6" @bind-Value="@EditedObject.ColumnCount"></MatNumericUpDownField>
                            </div>
                            <div class="form-group d-flex align-items-center">
                                <label class="mb-0 mr-3" style="color: @(EditedObject.Private ? "red" : "green")">@(EditedObject.Private ? "Private" : "Public")</label>
                                <MatSlideToggle @bind-Value="@EditedObject.Private"></MatSlideToggle>
                            </div>
                        </fieldset>
                    @*</MatTab>
                </MatTabGroup>*@
                <MatDialogActions>
                    <MatButton Type="button" OnClick="Close">Cancel</MatButton>
                    <MatButton Type="submit" Raised="true">OK</MatButton>
                </MatDialogActions>
            </EditForm>
        }
        else
        {
            <MatDialogActions>
                <MatButton OnClick="Close">Cancel</MatButton>
                <MatButton OnClick="Delete" Raised="true">OK</MatButton>
            </MatDialogActions>
        }
    </MatDialogContent>
</MatDialog>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public CRUDOperation Operation { get; set; }

    [Parameter]
    public DashboardData EditedObject { get; set; }

    string Title => $"{Operation} Dashboard{(Operation == CRUDOperation.Delete ? " ?" : "")}";

    async Task Submit(EditContext context)
    {
        await Close();
        Dispatcher.Dispatch(new UpsertDashboardResultAction(EditedObject, true));
    }

    async Task Delete()
    {
        await Close();
        Dispatcher.Dispatch(new DeleteDashboardAction(EditedObject.Id));
    }

    async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}