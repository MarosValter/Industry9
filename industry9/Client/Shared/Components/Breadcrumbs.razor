@using industry9.Client.Data.Navigation
@using industry9.Client.Data.Store.Features.AppBar.Actions
@implements IDisposable

@inject AppState AppState
@inject IDispatcher Dispatcher
@inject industry9NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<ul class="breadcrumb">
    <li>
        <a href="/">@RootLinkTitle</a>
    </li>
    @foreach (var (link, index) in _links.Select((item, index) => (item, index)))
    {
        if (index == _links.Length)
        {
            <li><a href="@link.AbsolutePath">@link.Title</a></li>
        }
        else
        {
            <li>@link.Title</li>
        }
    }
</ul>

@code {
    // This is just for demo and is VERY Hackish  for several reasons
    // Blazor does not have page implemented for client side... as far as I know so we split page names with underscore for now.
    // Path system is hack as well as the Url.. Maybe you have a better solution?

    [Parameter]
    public string RootLinkTitle { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    LinkItem[] _links;
    bool _isLoggedIn;

    protected override async Task OnParametersSetAsync()
    {
        //var user = (await AuthenticationStateTask).User;
        _isLoggedIn = false;//user.Identity.IsAuthenticated;
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateBreadcrumbs();
        NavigationManager.LocationChanged += OnLocationChanges;
        await base.OnInitializedAsync();
    }

    void OnLocationChanges(object sender, LocationChangedEventArgs e) => UpdateBreadcrumbs();

    private void UpdateBreadcrumbs()
    {
        _links = NavigationManager.BuildBreadcrumbs();
        if (_links.Length > 0)
        {
            Dispatcher.Dispatch(new SetAppBarAction(_links[0].Title, null));
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanges;
    }
}
