@using industry9.Common.Enums
@using industry9.Client.Data.Dto.DataSourceDefinition
@using industry9.Client.Data.Store.Features.DataSourceDefinition.Actions
@using DataSourceType = industry9.Client.Data.GraphQL.Generated.DataSourceType

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher

<MatDialog @bind-IsOpen="@IsOpen">
    <MatDialogTitle>@Title</MatDialogTitle>
    <MatDialogContent>
        @if (Operation == CRUDOperation.Create || Operation == CRUDOperation.Update)
        {
            <EditForm Model="@EditedObject" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MatTabGroup>
                    <MatTab Label="General">
                        <fieldset>
                            <div class="form-group">
                                <MatSelectItem Label="Select type" @bind-Value="@EditedObject.Type" Items="@Types" Disabled="@(Operation == CRUDOperation.Update)" Outlined="true">
                                    <ItemTemplate Context="dataSourceType">
                                        <span style="color: @GetColor(dataSourceType)">@Enum.GetName(typeof(DataSourceType), dataSourceType)</span>
                                    </ItemTemplate>
                                </MatSelectItem>
                            </div>
                            <div class="form-group">
                                <MatTextField Label="Name" @bind-Value="@EditedObject.Name" Outlined="true"></MatTextField>
                            </div>
                        </fieldset>
                    </MatTab>
                    <MatTab Label="Properties">
                        @switch (EditedObject.Type)
                        {
                            case DataSourceType.Random:
                                <RandomDataSourceProperties @bind-Properties="@EditedObject.Properties"></RandomDataSourceProperties>
                                break;
                            case DataSourceType.DataQuery:
                                <QueryDataSourceProperties @bind-Properties="@EditedObject.Properties"></QueryDataSourceProperties>
                                break;
                        }
                    </MatTab>
                    <MatTab Label="Columns">
                        <ExportedColumns Columns="@EditedObject.Columns"></ExportedColumns>
                    </MatTab>
                </MatTabGroup>
                <MatDialogActions>
                    <MatButton Type="button" OnClick="Close">Cancel</MatButton>
                    <MatButton Type="submit" Raised="true">OK</MatButton>
                </MatDialogActions>
            </EditForm>
        }
        else
        {
            <MatDialogActions>
                <MatButton OnClick="Close">Cancel</MatButton>
                <MatButton OnClick="Delete" Raised="true">OK</MatButton>
            </MatDialogActions>
        }
    </MatDialogContent>
</MatDialog>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public CRUDOperation Operation { get; set; }

    [Parameter]
    public DataSourceDefinitionData EditedObject { get; set; }

    string Title => $"{Operation} DataSource definition{(Operation == CRUDOperation.Delete ? " ?" : "")}";

    static readonly DataSourceType[] Types =
        Enum.GetValues(typeof(DataSourceType))
            .Cast<DataSourceType>()
            //.Where(x => x != DataSourceType.Unknown)
            .ToArray();

    string GetColor(DataSourceType type)
    {
        return "";
    }

    async Task Submit(EditContext context)
    {
        await Close();
        Dispatcher.Dispatch(new UpsertDataSourceDefinitionResultAction(EditedObject, true));
    }

    async Task Delete()
    {
        await Close();
        Dispatcher.Dispatch(new DeleteDataSourceDefinitionAction(EditedObject.Id));
    }

    async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}
